# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Megvii
# This file is distributed under the same license as the MegEngine Documents
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MegEngine Documents \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-17 15:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/advanced/parameter_more_setting.rst:4
msgid "更细粒度的参数优化设置"
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:6
msgid "在 :ref:`train_and_evaluation` 中网络使用如下优化器进行训练："
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:16
msgid "这个优化器对所有参数都使用同一学习速率进行优化，而在本章中我们将介绍如何做到对不同的参数采用不同的学习速率。"
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:18
msgid ""
"本章我们沿用 :ref:`network_build` 中创建的 ``LeNet`` ，下述的优化器相关代码可以用于取代 "
":ref:`train_and_evaluation` 中对应的代码。"
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:22
msgid "不同参数使用不同的学习速率"
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:24
msgid ""
":class:`~.Optimizer` 支持将网络的参数进行分组，不同的参数组可以采用不同的学习速率进行训练。 "
"一个参数组由一个字典表示，这个字典中必然有键值对： ``'params': param_list`` ，用来指定参数组包含的参数。该字典还可以包含"
" ``'lr':learning_rate`` "
"来指定此参数组的学习速率。此键值对有时可省略，省略后参数组的学习速率由优化器指定。所有待优化参数组的字典会组成一个列表作为 "
":class:`~.Optimizer` 实例化时的第一个参数传入。"
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:26
msgid ""
"为了更好的说明参数组，我们首先使用 :class:`~.Module` 提供的 :meth:`~.Module.named_parameters`"
" 函数来对网络参数进行分组。这个函数返回一个包含网络所有参数并且以参数名字为键、参数变量为值的字典："
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:46
msgid "根据参数的名字我们可以将 ``LeNet`` 中所有卷积的参数分为一组，所有全连接层的参数分为另一组："
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:59
msgid "分组后即可根据下述代码对不同参数组设置不同的学习速率："
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:74
msgid "优化器中设置的参数组列表对应于 :attr:`~.Optimizer.param_groups` 属性。我们可以通过其获取不同参数组的学习速率。"
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:89
msgid "训练中对学习速率的更改"
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:91
msgid ""
"MegEngine "
"也支持在训练过程中对学习速率进行修改，比如部分参数训练到一定程度后就不再需要优化，此时将对应参数组的学习速率设为零即可。我们修改 "
":ref:`train_and_evaluation` "
"中的训练代码进行示例说明。修改后的训练代码总共训练四个epoch，我们会在第二个epoch结束时将所有全连接层参数的学习速率置零，并在每个epoch当中输出"
" ``LeNet`` 中全连接层的部分参数值以显示是否被更新。"
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:131
msgid "从输出可以看到在学习速率设为0之前参数值是在不断更新的，但是在设为0之后参数值就不再变化。"
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:133
msgid "同时多数网络在训练当中会不断减小学习速率，如下代码展示了 MegEnging 是如何在训练过程中线性减小学习速率的："
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:147
msgid "固定部分参数不优化"
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:149
msgid ""
"除了将不训练的参数分为一组并将学习速率设为零外，MegEngine "
"还提供了其他途径来固定参数不进行优化：仅将需要优化的参数与优化器绑定即可。如下代码所示，我们仅对 ``LeNet`` 中的卷积参数进行优化："
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:166
msgid "下述代码将上面的设置加入到了具体训练当中，能够更加直观的看到各个参数的梯度差异："
msgstr ""

#: ../../source/advanced/parameter_more_setting.rst:210
msgid "从输出可以看到除了卷积参数有梯度外其余参数均没有梯度也就不会更新。"
msgstr ""


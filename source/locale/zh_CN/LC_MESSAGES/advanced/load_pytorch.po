# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Megvii
# This file is distributed under the same license as the MegEngine Documents
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MegEngine Documents \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-17 15:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/advanced/load_pytorch.rst:4
msgid "在 MegEngine 中嵌入 PyTorch 子图（Experimental）"
msgstr ""

#: ../../source/advanced/load_pytorch.rst:6
msgid ""
"MegEngine 支持在网络搭建过程中嵌入 PyTorch 模块。 该功能可以方便用户轻松地将已有的 PyTorch 模块移植到 "
"MegEngine 框架中使用。"
msgstr ""

#: ../../source/advanced/load_pytorch.rst:9
msgid "安装本章节所需的 Python 库"
msgstr ""

#: ../../source/advanced/load_pytorch.rst:15
msgid ""
"对于一个已有的 PyTorch 模块，我们可以利用 MegEngine 中提供的 :class:`~.pytorch.PyTorchModule`"
" 将它包裹（wrap）成与 MegEngine :class:`~.Module` 兼容的模块。"
msgstr ""

#: ../../source/advanced/load_pytorch.rst:17
msgid ""
"为了方便演示，假设有一个现成的基于 PyTorch 实现的特征提取模块 ``LeNetExtractor`` （不包含 LeNet "
"网络结构中的分类层）。在 MegEngine 框架中，我们将这个 PyTorch 模块包裹，只需额外实现一层线性分类器，即可完成 LeNet "
"网络的搭建。"
msgstr ""

#: ../../source/advanced/load_pytorch.rst:19
msgid "代码如下："
msgstr ""

#: ../../source/advanced/load_pytorch.rst:47
msgid "基于 PyTorch 的 LeNetExtractor 代码如下："
msgstr ""


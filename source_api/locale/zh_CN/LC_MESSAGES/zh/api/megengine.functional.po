# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Megvii
# This file is distributed under the same license as the MegEngine Documents
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MegEngine Documents\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-13 10:41+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source_api/zh/api/megengine.functional.rst:2
msgid "megengine.functional package"
msgstr "megengine.functional 模块"

#: ../../source_api/zh/api/megengine.functional.rst:11
msgid "megengine.functional.debug\\_param"
msgstr "megengine.functional.debug\\_param"

#: megengine.functional.debug_param.get_conv_execution_strategy:1 of
msgid "Returns the execuation strategy of :class:`~.Conv2d`."
msgstr "返回 :class:`~.Conv2d` 的执行策略。"

#: megengine.functional.debug_param.get_conv_execution_strategy:3 of
msgid "See :func:`~.set_conv_execution_strategy` for possible return values"
msgstr "参考 :func:`~.set_conv_execution_strategy` 的相关说明了解可能返回的值"

#: megengine.functional.debug_param.get_conv_execution_strategy
#: megengine.functional.elemwise.clip megengine.functional.elemwise.sqrt
#: megengine.functional.elemwise.square
#: megengine.functional.loss.binary_cross_entropy
#: megengine.functional.loss.cross_entropy megengine.functional.loss.hinge_loss
#: megengine.functional.loss.l1_loss megengine.functional.loss.square_loss
#: megengine.functional.math.argmax megengine.functional.math.argmin
#: megengine.functional.math.argsort megengine.functional.math.isinf
#: megengine.functional.math.isnan megengine.functional.math.max
#: megengine.functional.math.mean megengine.functional.math.min
#: megengine.functional.math.normalize megengine.functional.math.prod
#: megengine.functional.math.sort megengine.functional.math.std
#: megengine.functional.math.sum megengine.functional.math.topk
#: megengine.functional.math.var megengine.functional.nn.adaptive_avg_pool2d
#: megengine.functional.nn.adaptive_max_pool2d
#: megengine.functional.nn.avg_pool2d megengine.functional.nn.conv1d
#: megengine.functional.nn.conv2d megengine.functional.nn.conv_bias_activation
#: megengine.functional.nn.conv_transpose2d megengine.functional.nn.dot
#: megengine.functional.nn.dropout megengine.functional.nn.indexing_one_hot
#: megengine.functional.nn.interpolate megengine.functional.nn.leaky_relu
#: megengine.functional.nn.linear megengine.functional.nn.logsigmoid
#: megengine.functional.nn.logsoftmax megengine.functional.nn.logsumexp
#: megengine.functional.nn.matmul megengine.functional.nn.max_pool2d
#: megengine.functional.nn.nms megengine.functional.nn.one_hot
#: megengine.functional.nn.prelu megengine.functional.nn.remap
#: megengine.functional.nn.roi_align megengine.functional.nn.roi_pooling
#: megengine.functional.nn.softmax megengine.functional.nn.softplus
#: megengine.functional.nn.svd megengine.functional.nn.sync_batch_norm
#: megengine.functional.nn.warp_perspective
#: megengine.functional.quantized.batch_conv_bias_activation
#: megengine.functional.quantized.conv_bias_activation
#: megengine.functional.tensor.arange megengine.functional.tensor.broadcast_to
#: megengine.functional.tensor.concat megengine.functional.tensor.cond_take
#: megengine.functional.tensor.expand_dims megengine.functional.tensor.eye
#: megengine.functional.tensor.flatten megengine.functional.tensor.full_like
#: megengine.functional.tensor.gather megengine.functional.tensor.linspace
#: megengine.functional.tensor.ones_like megengine.functional.tensor.reshape
#: megengine.functional.tensor.scatter megengine.functional.tensor.squeeze
#: megengine.functional.tensor.transpose megengine.functional.tensor.where
#: megengine.functional.tensor.zeros_like
#: megengine.functional.utils.topk_accuracy of
msgid "Return type"
msgstr "返回值类型"

#: megengine.functional.debug_param.get_conv_execution_strategy:6 of
msgid ":py:class:`str`"
msgstr ":py:class:`str`"

#: megengine.functional.debug_param.set_conv_execution_strategy:1 of
msgid "Sets the execuation strategy of :class:`~.Conv2d`."
msgstr "设置 :class:`~.Conv2d` 的执行策略。"

#: megengine.functional.debug_param.set_conv_execution_strategy
#: megengine.functional.elemwise.add megengine.functional.elemwise.clip
#: megengine.functional.elemwise.cos megengine.functional.elemwise.equal
#: megengine.functional.elemwise.hswish
#: megengine.functional.elemwise.left_shift megengine.functional.elemwise.sqrt
#: megengine.functional.elemwise.square
#: megengine.functional.loss.binary_cross_entropy
#: megengine.functional.loss.cross_entropy megengine.functional.loss.hinge_loss
#: megengine.functional.loss.l1_loss megengine.functional.loss.square_loss
#: megengine.functional.math.argmax megengine.functional.math.argmin
#: megengine.functional.math.argsort megengine.functional.math.isinf
#: megengine.functional.math.isnan megengine.functional.math.max
#: megengine.functional.math.mean megengine.functional.math.min
#: megengine.functional.math.norm megengine.functional.math.normalize
#: megengine.functional.math.prod megengine.functional.math.sort
#: megengine.functional.math.std megengine.functional.math.sum
#: megengine.functional.math.topk megengine.functional.math.var
#: megengine.functional.nn.adaptive_avg_pool2d
#: megengine.functional.nn.adaptive_max_pool2d
#: megengine.functional.nn.avg_pool2d megengine.functional.nn.batch_norm
#: megengine.functional.nn.conv1d megengine.functional.nn.conv2d
#: megengine.functional.nn.conv_bias_activation
#: megengine.functional.nn.conv_transpose2d megengine.functional.nn.dot
#: megengine.functional.nn.dropout megengine.functional.nn.embedding
#: megengine.functional.nn.indexing_one_hot megengine.functional.nn.interpolate
#: megengine.functional.nn.linear megengine.functional.nn.logsigmoid
#: megengine.functional.nn.logsoftmax megengine.functional.nn.logsumexp
#: megengine.functional.nn.matmul megengine.functional.nn.max_pool2d
#: megengine.functional.nn.nms megengine.functional.nn.one_hot
#: megengine.functional.nn.remap megengine.functional.nn.roi_align
#: megengine.functional.nn.roi_pooling megengine.functional.nn.softmax
#: megengine.functional.nn.softplus megengine.functional.nn.svd
#: megengine.functional.nn.sync_batch_norm
#: megengine.functional.nn.warp_perspective
#: megengine.functional.quantized.batch_conv_bias_activation
#: megengine.functional.quantized.conv_bias_activation
#: megengine.functional.tensor.arange megengine.functional.tensor.broadcast_to
#: megengine.functional.tensor.concat megengine.functional.tensor.cond_take
#: megengine.functional.tensor.expand_dims megengine.functional.tensor.eye
#: megengine.functional.tensor.flatten megengine.functional.tensor.gather
#: megengine.functional.tensor.linspace megengine.functional.tensor.ones
#: megengine.functional.tensor.reshape megengine.functional.tensor.scatter
#: megengine.functional.tensor.split megengine.functional.tensor.squeeze
#: megengine.functional.tensor.stack megengine.functional.tensor.transpose
#: megengine.functional.tensor.where megengine.functional.tensor.zeros_like
#: megengine.functional.types.get_ndtuple megengine.functional.utils.copy
#: megengine.functional.utils.topk_accuracy of
msgid "Parameters"
msgstr "参数"

#: megengine.functional.debug_param.set_conv_execution_strategy:4 of
msgid ""
"Decides how :class:`~.Conv2d` algorithm is chosen. Available values:  * "
"'HEURISTIC' uses heuristic to choose the fastest algorithm. * 'PROFILE' "
"runs possible algorithms on real device to find the best one. * "
"'PROFILE_HEURISTIC' uses profiling result and heuristic to choose the "
"fastest algorithm. * 'PROFILE_REPRODUCIBLE' uses the fastest of profiling"
" result that is also reproducible. * 'HEURISTIC_REPRODUCIBLE' uses "
"heuristic to choose the fastest algorithm that is also reproducible.  The"
" default strategy is 'HEURISTIC'.  It can also be set through the "
"environment variable 'MEGENGINE_CONV_EXECUTION_STRATEGY'."
msgstr " "

#: megengine.functional.debug_param.set_conv_execution_strategy:4 of
msgid "Decides how :class:`~.Conv2d` algorithm is chosen. Available values:"
msgstr "决定 :class:`~.Conv2d` 算法的选择方式。 可能的取值有："

#: megengine.functional.debug_param.set_conv_execution_strategy:7 of
msgid "'HEURISTIC' uses heuristic to choose the fastest algorithm."
msgstr "'HEURISTIC' 使用启发式方法以选择速度最快的算法。"

#: megengine.functional.debug_param.set_conv_execution_strategy:8 of
msgid "'PROFILE' runs possible algorithms on real device to find the best one."
msgstr "'PROFILE' 在真实的设备上运行可能的所有算法以找出最佳算法。"

#: megengine.functional.debug_param.set_conv_execution_strategy:9 of
msgid ""
"'PROFILE_HEURISTIC' uses profiling result and heuristic to choose the "
"fastest algorithm."
msgstr "'PROFILE_HEURISTIC' 使用真实设备上的运行速度结果和启发式的方法以选择速度最快的算法。"

#: megengine.functional.debug_param.set_conv_execution_strategy:10 of
msgid ""
"'PROFILE_REPRODUCIBLE' uses the fastest of profiling result that is also "
"reproducible."
msgstr "'PROFILE_REPRODUCIBLE' 使用在真实设备上运行速度最快并可以复现的算法。"

#: megengine.functional.debug_param.set_conv_execution_strategy:11 of
msgid ""
"'HEURISTIC_REPRODUCIBLE' uses heuristic to choose the fastest algorithm "
"that is also reproducible."
msgstr "'HEURISTIC_REPRODUCIBLE' 使用启发式方法选择速度最快并且可以复现的算法。"

#: megengine.functional.debug_param.set_conv_execution_strategy:13 of
msgid "The default strategy is 'HEURISTIC'."
msgstr "默认的策略是 'HEURISTIC'。"

#: megengine.functional.debug_param.set_conv_execution_strategy:15 of
msgid ""
"It can also be set through the environment variable "
"'MEGENGINE_CONV_EXECUTION_STRATEGY'."
msgstr "它也可以通过环境变量 “MEGENGINE_CONV_EXECUTION_STRATEGY” 进行设置。"

#: ../../source_api/zh/api/megengine.functional.rst:19
msgid "megengine.functional.distributed"
msgstr "megengine.functional.distributed"

#: ../../source_api/zh/api/megengine.functional.rst:27
msgid "megengine.functional.elemwise"
msgstr "megengine.functional.elemwise"

#: megengine.functional.elemwise.abs:1 of
msgid "Element-wise `absolute value`."
msgstr "逐元素取绝对值。"

#: megengine.functional.elemwise.acos:1 of
msgid "Element-wise `inverse cosine`."
msgstr "逐元素计算反余弦函数。"

#: megengine.functional.elemwise.acosh:1 of
msgid "Element-wise `inverse hyperbolic cosine`."
msgstr "逐元素计算反双曲余弦函数。"

#: megengine.functional.elemwise.add:1 of
msgid "Element-wise `addition`. At least one operand should be tensor."
msgstr "逐元素加。至少一个操作数需要是张量。"

#: megengine.functional.elemwise.add:4 of
msgid ""
"Same for "
"sub/mul/div/floor_div/pow/mod/atan2/equal/not_equal/less/less_equal/greater/greater_equal/maximum/minmium."
msgstr ""
"sub/mul/div/floor_div/pow/mod/atan2/equal/not_equal/less/less_equal/greater/greater_equal/maximum/minmium"
" 同理。"

#: megengine.functional.elemwise.add:6 megengine.functional.elemwise.clip:12
#: megengine.functional.elemwise.cos:3 megengine.functional.elemwise.hswish:3
#: megengine.functional.elemwise.sqrt:5 megengine.functional.elemwise.square:3
#: megengine.functional.math.argmax:6 megengine.functional.math.argmin:6
#: megengine.functional.math.isinf:4 megengine.functional.math.isnan:4
#: megengine.functional.math.max:6 megengine.functional.math.mean:6
#: megengine.functional.math.min:6 megengine.functional.math.norm:5
#: megengine.functional.math.normalize:11 megengine.functional.math.prod:5
#: megengine.functional.math.sign:3 megengine.functional.math.std:6
#: megengine.functional.math.sum:5 megengine.functional.math.var:6
#: megengine.functional.nn.adaptive_avg_pool2d:6
#: megengine.functional.nn.adaptive_max_pool2d:6
#: megengine.functional.nn.avg_pool2d:6 megengine.functional.nn.batch_norm:6
#: megengine.functional.nn.dropout:5 megengine.functional.nn.indexing_one_hot:4
#: megengine.functional.nn.interpolate:4 megengine.functional.nn.logsigmoid:10
#: megengine.functional.nn.logsoftmax:16 megengine.functional.nn.logsumexp:20
#: megengine.functional.nn.max_pool2d:6 megengine.functional.nn.one_hot:4
#: megengine.functional.nn.softmax:12 megengine.functional.nn.softplus:16
#: megengine.functional.nn.sync_batch_norm:6
#: megengine.functional.tensor.broadcast_to:4
#: megengine.functional.tensor.expand_dims:4
#: megengine.functional.tensor.flatten:4 megengine.functional.tensor.gather:16
#: megengine.functional.tensor.ones:3 megengine.functional.tensor.reshape:5
#: megengine.functional.tensor.split:4 megengine.functional.tensor.squeeze:4
#: megengine.functional.tensor.transpose:4
#: megengine.functional.tensor.zeros_like:4 megengine.functional.utils.copy:3
#: of
msgid "input tensor."
msgstr "输入张量。"

#: megengine.functional.elemwise.add megengine.functional.elemwise.clip
#: megengine.functional.elemwise.cos megengine.functional.elemwise.equal
#: megengine.functional.elemwise.hswish
#: megengine.functional.elemwise.left_shift megengine.functional.elemwise.sqrt
#: megengine.functional.elemwise.square
#: megengine.functional.loss.binary_cross_entropy
#: megengine.functional.loss.cross_entropy megengine.functional.loss.hinge_loss
#: megengine.functional.loss.l1_loss megengine.functional.loss.square_loss
#: megengine.functional.math.argmax megengine.functional.math.argmin
#: megengine.functional.math.argsort megengine.functional.math.isinf
#: megengine.functional.math.isnan megengine.functional.math.max
#: megengine.functional.math.mean megengine.functional.math.min
#: megengine.functional.math.norm megengine.functional.math.normalize
#: megengine.functional.math.prod megengine.functional.math.sign
#: megengine.functional.math.sort megengine.functional.math.std
#: megengine.functional.math.sum megengine.functional.math.topk
#: megengine.functional.math.var megengine.functional.nn.adaptive_avg_pool2d
#: megengine.functional.nn.adaptive_max_pool2d
#: megengine.functional.nn.avg_pool2d megengine.functional.nn.batch_norm
#: megengine.functional.nn.conv2d megengine.functional.nn.conv_transpose2d
#: megengine.functional.nn.dot megengine.functional.nn.dropout
#: megengine.functional.nn.embedding megengine.functional.nn.indexing_one_hot
#: megengine.functional.nn.interpolate megengine.functional.nn.matmul
#: megengine.functional.nn.max_pool2d megengine.functional.nn.nms
#: megengine.functional.nn.one_hot megengine.functional.nn.remap
#: megengine.functional.nn.roi_align megengine.functional.nn.roi_pooling
#: megengine.functional.nn.svd megengine.functional.nn.sync_batch_norm
#: megengine.functional.nn.warp_perspective megengine.functional.tensor.arange
#: megengine.functional.tensor.broadcast_to megengine.functional.tensor.concat
#: megengine.functional.tensor.expand_dims megengine.functional.tensor.eye
#: megengine.functional.tensor.flatten megengine.functional.tensor.gather
#: megengine.functional.tensor.linspace megengine.functional.tensor.ones
#: megengine.functional.tensor.scatter megengine.functional.tensor.split
#: megengine.functional.tensor.squeeze megengine.functional.tensor.stack
#: megengine.functional.tensor.transpose megengine.functional.tensor.where
#: megengine.functional.tensor.zeros_like
#: megengine.functional.types.get_ndtuple
#: megengine.functional.utils.topk_accuracy of
msgid "Returns"
msgstr "返回"

#: megengine.functional.elemwise.add:7 megengine.functional.elemwise.cos:4
#: megengine.functional.elemwise.equal:5 megengine.functional.elemwise.hswish:4
#: megengine.functional.elemwise.left_shift:5
#: megengine.functional.elemwise.sqrt:7 megengine.functional.elemwise.square:5
#: of
msgid "computed tensor."
msgstr "计算得到的张量。"

#: megengine.functional.elemwise.add:9 megengine.functional.elemwise.clip:18
#: megengine.functional.elemwise.cos:6 megengine.functional.elemwise.equal:7
#: megengine.functional.elemwise.left_shift:7
#: megengine.functional.elemwise.sqrt:9 megengine.functional.elemwise.square:7
#: megengine.functional.loss.binary_cross_entropy:15
#: megengine.functional.loss.cross_entropy:28
#: megengine.functional.loss.hinge_loss:16 megengine.functional.loss.l1_loss:25
#: megengine.functional.loss.square_loss:30 megengine.functional.math.argmax:14
#: megengine.functional.math.argmin:14 megengine.functional.math.argsort:10
#: megengine.functional.math.isinf:8 megengine.functional.math.isnan:8
#: megengine.functional.math.max:14 megengine.functional.math.mean:14
#: megengine.functional.math.min:14 megengine.functional.math.norm:13
#: megengine.functional.math.prod:12 megengine.functional.math.sign:6
#: megengine.functional.math.sort:10 megengine.functional.math.std:14
#: megengine.functional.math.sum:15 megengine.functional.math.topk:16
#: megengine.functional.math.var:14 megengine.functional.nn.dot:12
#: megengine.functional.nn.dropout:14
#: megengine.functional.nn.indexing_one_hot:13
#: megengine.functional.nn.interpolate:15 megengine.functional.nn.logsigmoid:12
#: megengine.functional.nn.logsoftmax:20 megengine.functional.nn.logsumexp:26
#: megengine.functional.nn.matmul:21 megengine.functional.nn.nms:15
#: megengine.functional.nn.one_hot:10 megengine.functional.nn.remap:22
#: megengine.functional.nn.roi_align:22 megengine.functional.nn.roi_pooling:16
#: megengine.functional.nn.softmax:17 megengine.functional.nn.softplus:18
#: megengine.functional.nn.svd:8 megengine.functional.nn.warp_perspective:33
#: megengine.functional.tensor.arange:13
#: megengine.functional.tensor.broadcast_to:10
#: megengine.functional.tensor.concat:11
#: megengine.functional.tensor.cond_take:11
#: megengine.functional.tensor.expand_dims:10
#: megengine.functional.tensor.eye:10 megengine.functional.tensor.flatten:12
#: megengine.functional.tensor.gather:24
#: megengine.functional.tensor.linspace:13 megengine.functional.tensor.ones:6
#: megengine.functional.tensor.reshape:9 megengine.functional.tensor.scatter:41
#: megengine.functional.tensor.split:9 megengine.functional.tensor.squeeze:10
#: megengine.functional.tensor.stack:9 megengine.functional.tensor.transpose:22
#: megengine.functional.tensor.where:16
#: megengine.functional.tensor.zeros_like:8 megengine.functional.utils.copy:6
#: megengine.functional.utils.topk_accuracy:13 of
msgid "Examples:"
msgstr "例如："

#: megengine.functional.elemwise.add:22 megengine.functional.elemwise.clip:31
#: megengine.functional.elemwise.cos:18 megengine.functional.elemwise.equal:20
#: megengine.functional.elemwise.left_shift:19
#: megengine.functional.elemwise.sqrt:21
#: megengine.functional.elemwise.square:19
#: megengine.functional.loss.binary_cross_entropy:28
#: megengine.functional.loss.cross_entropy:43
#: megengine.functional.loss.hinge_loss:28 megengine.functional.loss.l1_loss:38
#: megengine.functional.loss.square_loss:43 megengine.functional.math.argmax:26
#: megengine.functional.math.argmin:26 megengine.functional.math.argsort:22
#: megengine.functional.math.isinf:18 megengine.functional.math.isnan:18
#: megengine.functional.math.max:26 megengine.functional.math.mean:26
#: megengine.functional.math.min:26 megengine.functional.math.norm:25
#: megengine.functional.math.prod:24 megengine.functional.math.sign:16
#: megengine.functional.math.sort:22 megengine.functional.math.std:26
#: megengine.functional.math.sum:27 megengine.functional.math.topk:28
#: megengine.functional.math.var:26 megengine.functional.nn.dot:25
#: megengine.functional.nn.dropout:26
#: megengine.functional.nn.indexing_one_hot:25
#: megengine.functional.nn.interpolate:29 megengine.functional.nn.logsigmoid:24
#: megengine.functional.nn.logsoftmax:32 megengine.functional.nn.logsumexp:38
#: megengine.functional.nn.matmul:34 megengine.functional.nn.nms:32
#: megengine.functional.nn.one_hot:22 megengine.functional.nn.remap:38
#: megengine.functional.nn.roi_align:36 megengine.functional.nn.roi_pooling:30
#: megengine.functional.nn.softmax:29 megengine.functional.nn.softplus:30
#: megengine.functional.nn.svd:20 megengine.functional.nn.warp_perspective:51
#: megengine.functional.tensor.arange:23 megengine.functional.tensor.arange:25
#: megengine.functional.tensor.broadcast_to:22
#: megengine.functional.tensor.concat:24
#: megengine.functional.tensor.cond_take:24
#: megengine.functional.tensor.expand_dims:22
#: megengine.functional.tensor.eye:20 megengine.functional.tensor.flatten:28
#: megengine.functional.tensor.gather:38
#: megengine.functional.tensor.linspace:23 megengine.functional.tensor.ones:15
#: megengine.functional.tensor.reshape:20
#: megengine.functional.tensor.scatter:55 megengine.functional.tensor.split:29
#: megengine.functional.tensor.squeeze:22 megengine.functional.tensor.stack:22
#: megengine.functional.tensor.transpose:33
#: megengine.functional.tensor.where:29
#: megengine.functional.tensor.zeros_like:20 megengine.functional.utils.copy:18
#: megengine.functional.utils.topk_accuracy:26 of
msgid "Outputs:"
msgstr "输出："

#: megengine.functional.elemwise.asin:1 of
msgid "Element-wise `inverse sine`."
msgstr "逐元素计算反正弦函数。"

#: megengine.functional.elemwise.asinh:1 of
msgid "Element-wise `inverse hyperbolic sine`."
msgstr "逐元素计算反双曲正弦函数。"

#: megengine.functional.elemwise.atan:1 of
msgid "Element-wise `inverse tangent`."
msgstr "逐元素计算反正切函数。"

#: megengine.functional.elemwise.atan2:1 of
msgid "Element-wise `2-argument arctangent`."
msgstr "逐元素计算两个参数的反正切函数。"

#: megengine.functional.elemwise.atanh:1 of
msgid "Element-wise `inverse hyperbolic tangent`."
msgstr "逐元素计算反双曲正切函数。"

#: megengine.functional.elemwise.ceil:1 of
msgid "Element-wise `ceiling`."
msgstr "逐元素上取整。"

#: megengine.functional.elemwise.clip:1 of
msgid ""
"Clamps all elements in input tensor into the range `[` :attr:`lower`, "
":attr:`upper` `]` and returns a resulting tensor:"
msgstr "把每个元素的值限定在范围 `[` :attr:`lower`, :attr:`upper` `]` 然后返回该张量:"

#: megengine.functional.elemwise.clip:4 of
msgid ""
"y_i = \\begin{cases}\n"
"    \\text{lower} & \\text{if } x_i < \\text{lower} \\\\\n"
"    x_i & \\text{if } \\text{lower} \\leq x_i \\leq \\text{upper} \\\\\n"
"    \\text{upper} & \\text{if } x_i > \\text{upper}\n"
"\\end{cases}\n"
"\n"
msgstr ""
"y_i = \\begin{cases}     \\text{lower} & \\text{if } x_i < \\text{lower} "
"\\\\     x_i & \\text{if } \\text{lower} \\leq x_i \\leq \\text{upper} "
"\\\\     \\text{upper} & \\text{if } x_i > \\text{upper} \\end{cases}"

#: megengine.functional.elemwise.clip:13 of
msgid "lower-bound of the range to be clamped to."
msgstr "限定区间的下界"

#: megengine.functional.elemwise.clip:14 of
msgid "upper-bound of the range to be clamped to."
msgstr "限定区间的上界"

#: megengine.functional.elemwise.clip:15 megengine.functional.elemwise.sqrt:6
#: megengine.functional.elemwise.square:4
#: megengine.functional.loss.binary_cross_entropy:12
#: megengine.functional.loss.cross_entropy:25
#: megengine.functional.loss.hinge_loss:13 megengine.functional.loss.l1_loss:22
#: megengine.functional.loss.square_loss:22 megengine.functional.math.argmax:11
#: megengine.functional.math.argmin:11 megengine.functional.math.argsort:7
#: megengine.functional.math.isinf:5 megengine.functional.math.isnan:5
#: megengine.functional.math.max:11 megengine.functional.math.mean:11
#: megengine.functional.math.min:11 megengine.functional.math.normalize:18
#: megengine.functional.math.prod:9 megengine.functional.math.std:11
#: megengine.functional.math.sum:12 megengine.functional.math.var:11
#: megengine.functional.nn.adaptive_avg_pool2d:9
#: megengine.functional.nn.adaptive_max_pool2d:9
#: megengine.functional.nn.avg_pool2d:16 megengine.functional.nn.conv1d:36
#: megengine.functional.nn.conv2d:32
#: megengine.functional.nn.conv_bias_activation:32
#: megengine.functional.nn.conv_transpose2d:32 megengine.functional.nn.dot:9
#: megengine.functional.nn.dropout:11
#: megengine.functional.nn.indexing_one_hot:10
#: megengine.functional.nn.interpolate:12 megengine.functional.nn.leaky_relu:6
#: megengine.functional.nn.linear:14 megengine.functional.nn.logsigmoid:33
#: megengine.functional.nn.logsoftmax:41 megengine.functional.nn.logsumexp:46
#: megengine.functional.nn.matmul:18 megengine.functional.nn.max_pool2d:14
#: megengine.functional.nn.nms:12 megengine.functional.nn.one_hot:7
#: megengine.functional.nn.prelu:6 megengine.functional.nn.remap:19
#: megengine.functional.nn.roi_align:19 megengine.functional.nn.roi_pooling:13
#: megengine.functional.nn.softmax:38 megengine.functional.nn.softplus:38
#: megengine.functional.nn.svd:5 megengine.functional.nn.sync_batch_norm:27
#: megengine.functional.nn.warp_perspective:26
#: megengine.functional.quantized.batch_conv_bias_activation:32
#: megengine.functional.quantized.conv_bias_activation:32
#: megengine.functional.tensor.arange:10
#: megengine.functional.tensor.broadcast_to:7
#: megengine.functional.tensor.concat:8
#: megengine.functional.tensor.cond_take:32
#: megengine.functional.tensor.expand_dims:7 megengine.functional.tensor.eye:7
#: megengine.functional.tensor.flatten:9
#: megengine.functional.tensor.full_like:4
#: megengine.functional.tensor.gather:21
#: megengine.functional.tensor.linspace:10
#: megengine.functional.tensor.ones_like:4
#: megengine.functional.tensor.reshape:30
#: megengine.functional.tensor.scatter:38 megengine.functional.tensor.squeeze:7
#: megengine.functional.tensor.transpose:19
#: megengine.functional.tensor.where:13
#: megengine.functional.tensor.zeros_like:5 of
msgid ":py:class:`~megengine.tensor.Tensor`"
msgstr ":py:class:`~megengine.tensor.Tensor`"

#: megengine.functional.elemwise.clip:16 of
msgid "output clamped tensor."
msgstr "输出经过区间限定的张量。"

#: megengine.functional.elemwise.cos:1 of
msgid "Element-wise `cosine`."
msgstr "逐元素计算余弦函数。"

#: megengine.functional.elemwise.cosh:1 of
msgid "Element-wise `hyperbolic cosine`."
msgstr "逐元素计算双曲余弦函数。"

#: megengine.functional.elemwise.div:1 of
msgid "Element-wise `(x / y)`."
msgstr "逐元素相除。"

#: megengine.functional.elemwise.equal:1 of
msgid "Element-wise `(x == y)`."
msgstr "逐元素判断是否相等。"

#: megengine.functional.elemwise.equal:3 of
msgid "input tensor 1."
msgstr "输入张量1。"

#: megengine.functional.elemwise.equal:4 of
msgid "input tensor 2."
msgstr "输入张量2。"

#: megengine.functional.elemwise.exp:1 of
msgid "Element-wise `exponential`."
msgstr "逐元素计算 `e` 的 `x` 次方。"

#: megengine.functional.elemwise.expm1:1 of
msgid "Element-wise `exp(x)-1`."
msgstr "逐元素计算expm1函数。"

#: megengine.functional.elemwise.floor:1 of
msgid "Element-wise `floor`."
msgstr "逐元素计算下取整函数。"

#: megengine.functional.elemwise.floor_div:1 of
msgid "Element-wise `floor(x / y)`."
msgstr "逐元素相除并下取整。"

#: megengine.functional.elemwise.greater:1 of
msgid "Element-wise `(x > y)`."
msgstr "逐元素计算 x 大于 y。"

#: megengine.functional.elemwise.greater_equal:1 of
msgid "Element-wise `(x >= y)`."
msgstr "逐元素判断 x 大于或者等于 y。"

#: megengine.functional.elemwise.hsigmoid:1 of
msgid "Element-wise `relu6(x + 3) / 6`."
msgstr "逐元素计算 relu6(x + 3) / 6。"

#: megengine.functional.elemwise.hswish:1 of
msgid "Element-wise `x * relu6(x + 3) / 6`."
msgstr "逐元素计算 x * relu6(x + 3) / 6。"

#: megengine.functional.elemwise.hswish:6 of
msgid "Example:"
msgstr "例如："

#: megengine.functional.elemwise.left_shift:1 of
msgid "Element-wise `bitwise binary: x << y`."
msgstr "逐元素计算 x << y。"

#: megengine.functional.elemwise.left_shift:3 of
msgid "input tensor, should be int."
msgstr "输入张量。应该是整数类型。"

#: megengine.functional.elemwise.left_shift:4 of
msgid "how many bits to be left-shifted."
msgstr "需要左移的位数。"

#: megengine.functional.elemwise.less:1 of
msgid "Element-wise `(x < y)`."
msgstr "逐元素的计算 x 小于 y。"

#: megengine.functional.elemwise.less_equal:1 of
msgid "Element-wise `(x <= y)`."
msgstr "逐元素计算 x 小于或等于 y。"

#: megengine.functional.elemwise.log:1 of
msgid "Element-wise `logarithm (base e)`."
msgstr "逐元素计算以 `e` 为底的对数。"

#: megengine.functional.elemwise.log1p:1 of
msgid "Element-wise `log(x+1) (base e)`."
msgstr "逐元素计算 `(x+1)` 以 `e` 为底的对数。"

#: megengine.functional.elemwise.logical_and:1 of
msgid "Element-wise `logical and: x && y`."
msgstr "逐元素进行逻辑与运算。"

#: megengine.functional.elemwise.logical_not:1 of
msgid "Element-wise `logical not: ~x`."
msgstr "逐元素进行逻辑非运算。"

#: megengine.functional.elemwise.logical_or:1 of
msgid "Element-wise `logical or: x || y`."
msgstr "逐元素进行逻辑或运算。"

#: megengine.functional.elemwise.logical_xor:1 of
msgid "Element-wise `logical xor: x ^ y`."
msgstr "逐元素进行逻辑异或运算。"

#: megengine.functional.elemwise.maximum:1 of
msgid "Element-wise `maximum of array elements`."
msgstr "逐元素的最大数组元素。"

#: megengine.functional.elemwise.minimum:1 of
msgid "Element-wise `minimum of array elements`."
msgstr "逐元素的最小数组元素。"

#: megengine.functional.elemwise.mod:1 of
msgid "Element-wise `remainder of division`."
msgstr "返回逐元素相除所得的余数。"

#: megengine.functional.elemwise.mul:1 of
msgid "Element-wise `multiplication`."
msgstr "逐元素相乘。"

#: megengine.functional.elemwise.neg:1 of
msgid "Element-wise `negation`."
msgstr "逐元素取相反数。"

#: megengine.functional.elemwise.not_equal:1 of
msgid "Element-wise `(x != y)`."
msgstr "逐元素计算 x 不等于 y。"

#: megengine.functional.elemwise.pow:1 of
msgid "Element-wise `power`."
msgstr "逐元素进行指数运算。"

#: megengine.functional.elemwise.relu:1 of
msgid "Element-wise `max(x, 0)`."
msgstr "逐元素计算 `max(x, 0)`."

#: megengine.functional.elemwise.relu6:1 of
msgid "Element-wise `min(max(x, 0), 6)`."
msgstr "逐元素计算 `min(max(x, 0), 6)`."

#: megengine.functional.elemwise.right_shift:1 of
msgid "Element-wise `bitwise binary: x >> y`."
msgstr "逐元素计算 x >> y。"

#: megengine.functional.elemwise.round:1 of
msgid "Element-wise `rounding to int`."
msgstr "逐元素四舍五入到整数。"

#: megengine.functional.elemwise.sigmoid:1 of
msgid "Element-wise `1 / ( 1 + exp( -x ) )`."
msgstr "逐元素计算 1 / ( 1 + exp( -x ) ) 的值，并返回。"

#: megengine.functional.elemwise.sin:1 of
msgid "Element-wise `sine`."
msgstr "逐元素计算正弦函数。"

#: megengine.functional.elemwise.sinh:1 of
msgid "Element-wise `hyperbolic sine`."
msgstr "逐元素计算双曲正弦函数。"

#: megengine.functional.elemwise.sqrt:1 of
msgid "Element-wise `sqrt`. Returns ``NaN`` for negative input value."
msgstr "逐元素计算平方根。对于负数输入，返回 ``NaN``."

#: megengine.functional.elemwise.square:1 of
msgid "Returns a new tensor with the square of the elements of input tensor."
msgstr "返回一个包含输入张量中各元素平方的新的张量"

#: megengine.functional.elemwise.sub:1 of
msgid "Element-wise `subtraction`."
msgstr "逐元素相减。"

#: megengine.functional.elemwise.tan:1 of
msgid "Element-wise `tangent`."
msgstr "逐元素计算正切函数。"

#: megengine.functional.elemwise.tanh:1 of
msgid "Element-wise `hyperbolic tangent`."
msgstr "逐元素计算双曲正切值。"

#: ../../source_api/zh/api/megengine.functional.rst:35
msgid "megengine.functional.inplace"
msgstr "megengine.functional.inplace"

#: ../../source_api/zh/api/megengine.functional.rst:43
msgid "megengine.functional.loss"
msgstr "megengine.functional.loss"

#: megengine.functional.loss.binary_cross_entropy:1 of
msgid "Computes the binary cross entropy loss (using logits by default)."
msgstr "计算 binary cross entropy loss（默认使用 logits）。"

#: megengine.functional.loss.binary_cross_entropy:3 of
msgid ""
"By default(``with_logitis`` is True), ``pred`` is assumed to be logits, "
"class probabilities are given by sigmoid."
msgstr "默认情况下（``with_logitis`` 为真），``pred`` 被认为是 logits，类的概率将由 sigmoid 计算得出。"

#: megengine.functional.loss.binary_cross_entropy:7 of
msgid "`(N, *)`, where `*` means any number of additional dimensions."
msgstr "`(N,*)`，其中 * 指任何附加的维度。"

#: megengine.functional.loss.binary_cross_entropy:9 of
msgid "`(N, *)`, same shape as the input."
msgstr "`(N,*)`，与输入的形状相同。"

#: megengine.functional.loss.binary_cross_entropy:11 of
msgid "bool, whether to apply sigmoid first. Default: True"
msgstr "布尔值，是否先应用 sigmoid。默认：True"

#: megengine.functional.loss.binary_cross_entropy:13
#: megengine.functional.loss.cross_entropy:26
#: megengine.functional.loss.hinge_loss:14 megengine.functional.loss.l1_loss:23
#: megengine.functional.loss.square_loss:23 of
msgid "loss value."
msgstr "损失值。"

#: megengine.functional.loss.cross_entropy:1 of
msgid "Computes the multi-class cross entropy loss (using logits by default)."
msgstr "计算 multi-class cross entropy loss（默认使用 logits）。"

#: megengine.functional.loss.cross_entropy:3 of
msgid ""
"By default(``with_logitis`` is True), ``pred`` is assumed to be logits, "
"class probabilities are given by softmax."
msgstr "默认情况下（``with_logitis`` 为真），``pred`` 被认为是 logits，类的概率将由 softmax 计算得出。"

#: megengine.functional.loss.cross_entropy:6 of
msgid ""
"It has better numerical stability compared with sequential calls to "
":func:`~.softmax` and :func:`~.cross_entropy`."
msgstr "与顺序调用 :func:`~.softmax` 和  :func:`~.cross_entropy` 相比，具有更好的数值稳定性。"

#: megengine.functional.loss.cross_entropy:8 of
msgid "When using label smoothing, the label distribution is as follows:"
msgstr "当使用标签平滑 (label smoothing) 时，标签的分布情况如下:"

#: megengine.functional.loss.cross_entropy:10 of
msgid ""
"y^{LS}_{k}=y_{k}\\left(1-\\alpha\\right)+\\alpha/K\n"
"\n"
msgstr "y^{LS}_{k}=y_{k}\\left(1-\\alpha\\right)+\\alpha/K"

#: megengine.functional.loss.cross_entropy:12 of
msgid ""
"where :math:`y^{LS}` and :math:`y` are new label distribution and origin "
"label distribution respectively. k is the index of label distribution. "
":math:`\\alpha` is ``label_smooth`` and :math:`K` is the number of "
"classes."
msgstr ""
"其中 :math:`y^{LS}` 和 :math:`y` 分别是新的标签分布和原始的标签分布。 "
"k是标签分布的索引。:math:`\\alpha` 是 label_smooth， :math:`K` 是类的数量。"

#: megengine.functional.loss.cross_entropy:16 of
msgid "input tensor representing the predicted probability."
msgstr "表示预测概率的输入张量。"

#: megengine.functional.loss.cross_entropy:18 of
msgid "input tensor representing the classification label."
msgstr "表示分类标签的输入张量。"

#: megengine.functional.loss.cross_entropy:20 of
msgid "an axis along which softmax will be applied. Default: 1"
msgstr "沿着该维度应用 softmax 函数。默认：1。"

#: megengine.functional.loss.cross_entropy:22 of
msgid "whether to apply softmax first. Default: True"
msgstr "是否先应用 sigmoid。默认：True"

#: megengine.functional.loss.cross_entropy:24 of
msgid ""
"a label smoothing of parameter that can re-distribute target "
"distribution. Default: 0"
msgstr "用于对原始标签分布进行标签平滑的参数。默认：0。"

#: megengine.functional.loss.hinge_loss:1 of
msgid "Caculates the hinge loss which is often used in SVM."
msgstr "计算支持向量机 SVM 中经常使用的 hinge loss。"

#: megengine.functional.loss.hinge_loss:3 of
msgid "The hinge loss can be described as:"
msgstr "hinge loss 可以表示为："

#: megengine.functional.loss.hinge_loss:5 of
msgid ""
"loss(x, y) = \\frac{1}{N}\\sum_i\\sum_j(max(0, 1 - x_{ij}*y_{ij}))\n"
"\n"
msgstr "loss(x, y) = \\frac{1}{N}\\sum_i\\sum_j(max(0, 1 - x_{ij}*y_{ij}))"

#: megengine.functional.loss.hinge_loss:8 of
msgid "input tensor representing the predicted probability, shape is `(N, C)`."
msgstr "表示预测概率的输入张量，形为 `(N,C)`。"

#: megengine.functional.loss.hinge_loss:10 of
msgid ""
"input tensor representing the binary classification label, shape is `(N, "
"C)`."
msgstr "表示二分类标签的输入张量，形为 `(N,C)`。"

#: megengine.functional.loss.hinge_loss:12 of
msgid "specify the norm to caculate the loss, should be \"L1\" or \"L2\"."
msgstr "指定计算损失时采用的范数，应为 \"L1\" 或 \"L2\" 。"

#: megengine.functional.loss.l1_loss:1 of
msgid ""
"Calculates the mean absolute error (MAE) between each element in the pred"
" :math:`x` and label :math:`y`."
msgstr "计算预测值 :math:`x` 和标签值 :math:`y` 的每个元素之间的平均绝对误差(MAE)。"

#: megengine.functional.loss.l1_loss:4 of
msgid "The mean absolute error can be described as:"
msgstr "平均绝对误差可以表示为："

#: megengine.functional.loss.l1_loss:6 of
msgid ""
"\\ell(x,y) = mean\\left(L \\right)\n"
"\n"
msgstr "\\ell(x,y) = mean\\left(L \\right)"

#: megengine.functional.loss.l1_loss:8 megengine.functional.loss.square_loss:8
#: megengine.functional.nn.logsumexp:14 of
msgid "where"
msgstr "式中，"

#: megengine.functional.loss.l1_loss:10 of
msgid ""
"L = \\{l_1,\\dots,l_N\\}, \\quad\n"
"l_n = \\left| x_n - y_n \\right|,"
msgstr "L = \\{l_1,\\dots,l_N\\}, \\quad l_n = \\left| x_n - y_n \\right|,"

#: megengine.functional.loss.l1_loss:15
#: megengine.functional.loss.square_loss:15 of
msgid ""
":math:`x` and :math:`y` are tensors of arbitrary shapes with a total of "
":math:`N` elements each. :math:`N` is the batch size."
msgstr ""
":math:`x` 和 :math:`y` 是任意形状的张量，各张量包含 :math:`N` 个元素。  :math:`N` "
"是批(batch)大小。"

#: megengine.functional.loss.l1_loss:19
#: megengine.functional.loss.square_loss:19 of
msgid "predicted result from model."
msgstr "从模型中预测的结果。"

#: megengine.functional.loss.l1_loss:21
#: megengine.functional.loss.square_loss:21 of
msgid "ground truth to compare."
msgstr "用于比较的真实值。"

#: megengine.functional.loss.square_loss:1 of
msgid ""
"Calculates the mean squared error (squared L2 norm) between each element "
"in the pred :math:`x` and label :math:`y`."
msgstr "计算预测值 :math:`x` 和标签值 :math:`y` 之间的均方误差(平方L2范数)。"

#: megengine.functional.loss.square_loss:4 of
msgid "The mean squared error can be described as:"
msgstr "均方误差可以表示为："

#: megengine.functional.loss.square_loss:6 of
msgid ""
"\\ell(x, y) = mean\\left( L \\right)\n"
"\n"
msgstr "\\ell(x, y) = mean\\left( L \\right)"

#: megengine.functional.loss.square_loss:10 of
msgid ""
"L = \\{l_1,\\dots,l_N\\}, \\quad\n"
"l_n = \\left( x_n - y_n \\right)^2,"
msgstr "L = \\{l_1,\\dots,l_N\\}, \\quad l_n = \\left( x_n - y_n \\right)^2,"

#: megengine.functional.loss.square_loss:28 of
msgid "Shape:"
msgstr "形状："

#: megengine.functional.loss.square_loss:26 of
msgid ""
"pred: :math:`(N, *)` where :math:`*` means any number of additional "
"dimensions."
msgstr "pred : :math:`(N, *)` ，这里的 :math:`*` 指任何附加的维度。"

#: megengine.functional.loss.square_loss:28 of
msgid "label: :math:`(N, *)`. Same shape as ``pred``."
msgstr "label: :math:`(N, *)`. 与 ``pred`` 的形状相同"

#: ../../source_api/zh/api/megengine.functional.rst:51
msgid "megengine.functional.math"
msgstr "megengine.functional.math"

#: megengine.functional.math.argmax:1 of
msgid ""
"Returns the indices of the maximum values along given axis. If axis is a "
"list of dimensions, reduce over all of them."
msgstr "返回在给定轴 ``axis`` 上 ``inp`` 张量每一行的最大值的下标。如果给定的轴是一个维度列表，则规约所有维度。"

#: megengine.functional.math.argmax:8 megengine.functional.math.argmin:8
#: megengine.functional.math.max:8 megengine.functional.math.mean:8
#: megengine.functional.math.min:8 megengine.functional.math.prod:7
#: megengine.functional.math.std:8 megengine.functional.math.sum:7
#: megengine.functional.math.var:8 of
msgid ""
"dimension to reduce. If None, all dimensions will be reduced. Default: "
"None"
msgstr "要进行规约的维度。如果设置为 None，则所有的维度都将规约。默认：None"

#: megengine.functional.math.argmax:10 megengine.functional.math.argmin:10
#: megengine.functional.math.max:10 megengine.functional.math.mean:10
#: megengine.functional.math.min:10 megengine.functional.math.norm:10
#: megengine.functional.math.prod:8 megengine.functional.math.std:10
#: megengine.functional.math.sum:10 megengine.functional.math.var:10 of
msgid "whether the output tensor has axis retained or not. Default: False"
msgstr "输出张量是否保留了轴 *axis* 。默认：False"

#: megengine.functional.math.argmax:12 megengine.functional.math.argmin:12
#: megengine.functional.math.max:12 megengine.functional.math.mean:12
#: megengine.functional.math.min:12 megengine.functional.math.norm:11
#: megengine.functional.math.prod:10 megengine.functional.math.std:12
#: megengine.functional.math.sum:13 megengine.functional.math.var:12
#: megengine.functional.nn.adaptive_avg_pool2d:10
#: megengine.functional.nn.adaptive_max_pool2d:10
#: megengine.functional.nn.avg_pool2d:17 megengine.functional.nn.batch_norm:30
#: megengine.functional.nn.conv2d:33
#: megengine.functional.nn.conv_transpose2d:33
#: megengine.functional.nn.embedding:13
#: megengine.functional.nn.indexing_one_hot:11
#: megengine.functional.nn.interpolate:13 megengine.functional.nn.matmul:19
#: megengine.functional.nn.max_pool2d:15 megengine.functional.nn.one_hot:8
#: megengine.functional.nn.remap:20 megengine.functional.nn.roi_align:20
#: megengine.functional.nn.sync_batch_norm:28
#: megengine.functional.nn.warp_perspective:27
#: megengine.functional.tensor.broadcast_to:8
#: megengine.functional.tensor.concat:9
#: megengine.functional.tensor.expand_dims:8
#: megengine.functional.tensor.flatten:10 megengine.functional.tensor.gather:22
#: megengine.functional.tensor.scatter:39 megengine.functional.tensor.squeeze:8
#: megengine.functional.tensor.transpose:20
#: megengine.functional.tensor.where:14 of
msgid "output tensor."
msgstr "输出张量。"

#: megengine.functional.math.argmin:1 of
msgid ""
"Returns the indices of the minimum values along given axis. If axis is a "
"list of dimensions, reduce over all of them."
msgstr "返回在给定轴 ``axis`` 上 ``inp`` 张量每一行的最小值的下标。如果给定的轴是一个维度列表，则规约所有维度。"

#: megengine.functional.math.argsort:1 of
msgid "Returns the indices that would sort the input tensor."
msgstr "返回一个与输入张量形状相同的全1张量。"

#: megengine.functional.math.argsort:4 of
msgid ""
"input tensor. If it's 2d, the result would be array of indices show how "
"to sort each row in the input tensor."
msgstr "输入张量。如果是2维，返回结果为如何为输入张量按行排序的一组下标。"

#: megengine.functional.math.argsort:6 megengine.functional.math.sort:6 of
msgid "sort in descending order, where the largest comes first. Default: False"
msgstr "降序排列，即最大值位于第一位置。 默认：False"

#: megengine.functional.math.argsort:8 of
msgid "indices of int32 indicates how to sort the input."
msgstr "类型为 int32 的下标，展示如何为输入排序。"

#: megengine.functional.math.isinf:1 of
msgid "Returns a new tensor representing if each element is ``Inf`` or not."
msgstr "返回一个张量，它表示每个元素是否是无穷大值(Inf)。"

#: megengine.functional.math.isinf:6 megengine.functional.math.isnan:6 of
msgid "result tensor."
msgstr "分隔的张量。"

#: megengine.functional.math.isnan:1 of
msgid "Returns a new tensor representing if each element is ``NaN`` or not."
msgstr "返回一个新的张量，该张量表明每个元素是否为非数值类型(NaN)。"

#: megengine.functional.math.max:1 of
msgid ""
"Returns the max value of the input tensor along given axis. If axis is a "
"list of dimensions, reduce over all of them."
msgstr "返回在给定轴 ``axis`` 上 ``inp`` 张量每一行的最大值。如果给定的轴是一个维度列表，则规约所有维度。"

#: megengine.functional.math.mean:1 of
msgid ""
"Returns the mean value of input tensor along given axis. If axis is a "
"list of dimensions, reduce over all of them."
msgstr "返回在给定轴 ``axis`` 上 ``inp`` 张量每一行的平均值。如果给定的轴是一个维度列表，则规约所有维度。"

#: megengine.functional.math.min:1 of
msgid ""
"Returns the min value of input tensor along given axis. If axis is a list"
" of dimensions, reduce over all of them."
msgstr "返回在给定轴 ``axis`` 上 ``inp`` 张量每一行的最小值。如果给定的轴是一个维度列表，则规约所有维度。"

#: megengine.functional.math.norm:1 of
msgid "Calculates ``p``-norm of input tensor along given axis."
msgstr "计算在给定轴 ``axis`` 上 ``inp`` 张量每一行的 ``p``-范数。"

#: megengine.functional.math.norm:7 of
msgid "power of value applied to inp. Default: 2"
msgstr "对 ``inp`` 进行 ``p`` 次幂计算. 默认：2"

#: megengine.functional.math.norm:9 of
msgid "dimension to reduce. If None, input must be a vector. Default: None"
msgstr "要进行规约的维度。如果设置为 None，则所有的维度都将被规约。默认：None"

#: megengine.functional.math.normalize:1 of
msgid "Performs :math:`L_p` normalization of input tensor along given axis."
msgstr "返回在给定轴 ``axis`` 上 ``inp`` 张量每一行进行 :math:`L_p` 归一化后的结果。"

#: megengine.functional.math.normalize:4 of
msgid ""
"For a tensor of shape :math:`(n_0, ..., n_{dim}, ..., n_k)`, each "
":math:`n_{dim}` -element vector :math:`v` along dimension :attr:`axis` is"
" transformed as:"
msgstr ""
"对于一个形如 :math:`(n_0, ..., n_{dim}, ..., n_k)` 的张量 :attr:`inp` , 其每个 "
":math:`n_{dim}` - :attr:`axis` 维度上的元素向量 :math:`v` 将转化为:"

#: megengine.functional.math.normalize:7 of
msgid ""
"v = \\frac{v}{\\max(\\lVert v \\rVert_p, \\epsilon)}.\n"
"\n"
msgstr "v = \\frac{v}{\\max(\\lVert v \\rVert_p, \\epsilon)}."

#: megengine.functional.math.normalize:13 of
msgid "power of value applied to input tensor. Default: 2"
msgstr "对 ``inp`` 进行 ``p`` 次幂计算. 默认：2"

#: megengine.functional.math.normalize:15 of
msgid "dimension to reduce.If None, input must be a vector. Default: None"
msgstr "要进行规约的维度。如果设置为 None，则所有的维度都将被规约。默认：None"

#: megengine.functional.math.normalize:17 of
msgid "a small value to avoid division by zero. Default: 1e-12"
msgstr "为防止0做除数而设的较小值。 默认： 1e-12"

#: megengine.functional.math.normalize:19 of
msgid "normalized output tensor."
msgstr "归一化的输出张量。"

#: megengine.functional.math.prod:1 of
msgid ""
"Returns the product of input tensor along given axis. If axis is a list "
"of dimensions, reduce over all of them."
msgstr "返回在给定轴 ``axis`` 上 ``inp`` 张量每一行的乘积。如果给定的轴是一个维度列表，则规约所有维度。"

#: megengine.functional.math.sign:1 of
msgid ""
"Returns a new tensor representing the sign of each element in input "
"tensor."
msgstr "返回一个新的张量，该张量表明每个元素的符号。"

#: megengine.functional.math.sign of
msgid "param"
msgstr "参数"

#: megengine.functional.math.sign:4 of
msgid "the sign of input tensor."
msgstr "输入张量的符号。"

#: megengine.functional.math.sort:1 of
msgid "Returns sorted tensor and the indices would sort the input tensor."
msgstr "返回一个与输入张量形状相同的全1张量。"

#: megengine.functional.math.sort:4 of
msgid "input tensor. If it's 2d, the result would be sorted by row."
msgstr "输入张量，如果是二维的，则该张量的每行将进行排序。"

#: megengine.functional.math.sort:7 megengine.functional.math.topk:13 of
msgid ""
":py:data:`~typing.Tuple`\\[:py:class:`~megengine.tensor.Tensor`, "
":py:class:`~megengine.tensor.Tensor`]"
msgstr ""
":py:data:`~typing.Tuple`\\[:py:class:`~megengine.tensor.Tensor`, "
":py:class:`~megengine.tensor.Tensor`]"

#: megengine.functional.math.sort:8 of
msgid "tuple of two tensors `(sorted_tensor, indices_of_int32)`."
msgstr "由两个张量组成的元组 `(sorted_tensor, indices_of_int32)`。"

#: megengine.functional.math.std:1 of
msgid ""
"Returns the standard deviation of input tensor along given axis. If axis "
"is a list of dimensions, reduce over all of them."
msgstr "返回在给定轴 ``axis`` 上 ``inp`` 张量每一行的标准差。如果给定的轴是一个维度列表，则规约所有维度。"

#: megengine.functional.math.sum:1 of
msgid ""
"Returns the sum of input tensor along given axis. If axis is a list of "
"dimensions, reduce over all of them."
msgstr "返回在给定轴 ``axis`` 上 ``inp`` 张量每一行的和。如果给定的轴是一个维度列表，则规约所有维度。"

#: megengine.functional.math.topk:1 of
msgid "Selects the ``Top-K``(by default) smallest elements of 2d matrix by row."
msgstr "按行排序，选出二维矩阵中 Top-K (默认情况下)个最小元素。"

#: megengine.functional.math.topk:4 of
msgid "input tensor. If input tensor is 2d, each row will be sorted."
msgstr "输入张量，如果是二维的，则该张量的每行将进行排序。"

#: megengine.functional.math.topk:6 of
msgid "number of elements needed."
msgstr "所需元素的个数。"

#: megengine.functional.math.topk:8 of
msgid "if True, return the largest elements instead. Default: False"
msgstr "该值如果为true，则返回最大元素。 默认：False"

#: megengine.functional.math.topk:10 of
msgid "if True, only the k-th element will be returned. Default: False"
msgstr "该值如果为 True，则只返回第k个元素。 默认：False"

#: megengine.functional.math.topk:12 of
msgid "if True, the returned elements can be unordered. Default: False"
msgstr "该值如果为 True，则返回值可能是无序的。 默认：False"

#: megengine.functional.math.topk:14 of
msgid "tuple of two tensors `(topk_tensor, indices_of_int32)`."
msgstr "由两个张量组成的元组 `(topk_tensor, indices_of_int32)`。"

#: megengine.functional.math.var:1 of
msgid ""
"Returns the variance value of input tensor along given axis. If axis is a"
" list of dimensions, reduce over all of them."
msgstr "返回在给定轴 ``axis`` 上 ``inp`` 张量每一行的方差。如果给定的轴是一个维度列表，则规约所有维度。"

#: ../../source_api/zh/api/megengine.functional.rst:59
msgid "megengine.functional.nn"
msgstr "megengine.functional.nn"

#: megengine.functional.nn.conv_bias_activation:1
#: megengine.functional.quantized.conv_bias_activation:1 of
msgid "Convolution bias with activation operation, only for inference."
msgstr "带有激活操作的卷积偏置，仅用于推断。"

#: megengine.functional.nn.conv2d:6
#: megengine.functional.nn.conv_bias_activation:4
#: megengine.functional.nn.conv_transpose2d:6
#: megengine.functional.quantized.batch_conv_bias_activation:4
#: megengine.functional.quantized.conv_bias_activation:4 of
msgid "feature map of the convolution operation."
msgstr "卷积运算的特征图。"

#: megengine.functional.nn.conv2d:8
#: megengine.functional.nn.conv_bias_activation:6
#: megengine.functional.nn.conv_transpose2d:8
#: megengine.functional.quantized.conv_bias_activation:6 of
msgid "convolution kernel."
msgstr "卷积核。"

#: megengine.functional.nn.conv_bias_activation:8
#: megengine.functional.quantized.batch_conv_bias_activation:8
#: megengine.functional.quantized.conv_bias_activation:8 of
msgid "bias added to the result of convolution"
msgstr "添加到卷积结果中的偏置量"

#: megengine.functional.nn.conv2d:12
#: megengine.functional.nn.conv_bias_activation:10
#: megengine.functional.nn.conv_transpose2d:12
#: megengine.functional.quantized.batch_conv_bias_activation:10
#: megengine.functional.quantized.conv_bias_activation:10 of
msgid "stride of the 2D convolution operation. Default: 1"
msgstr "二维卷积运算中的步长。 默认： 1"

#: megengine.functional.nn.conv2d:14
#: megengine.functional.nn.conv_bias_activation:12
#: megengine.functional.nn.conv_transpose2d:14
#: megengine.functional.quantized.batch_conv_bias_activation:12
#: megengine.functional.quantized.conv_bias_activation:12 of
msgid ""
"size of the paddings added to the input on both sides of its spatial "
"dimensions. Only zero-padding is supported. Default: 0"
msgstr "在输入值的空间维度上每一侧填充的尺寸。 仅支持用零值填充。 默认： 0"

#: megengine.functional.nn.conv2d:17
#: megengine.functional.nn.conv_bias_activation:14
#: megengine.functional.nn.conv_transpose2d:17
#: megengine.functional.quantized.batch_conv_bias_activation:14
#: megengine.functional.quantized.conv_bias_activation:14 of
msgid "dilation of the 2D convolution operation. Default: 1"
msgstr "二维卷积运算的扩张值(dilation)。 默认： 1"

#: megengine.functional.nn.conv_bias_activation:16
#: megengine.functional.quantized.batch_conv_bias_activation:16
#: megengine.functional.quantized.conv_bias_activation:16 of
msgid ""
"number of groups into which the input and output channels are divided, so"
" as to perform a \"grouped convolution\". When ``groups`` is not 1, "
"``in_channels`` and ``out_channels`` must be divisible by ``groups``, and"
" the shape of weight should be `(groups, out_channel // groups, "
"in_channels // groups, height, width)`."
msgstr ""
"将输入和输出通道划分成的组数, 以便执行分组卷积 \"grouped convolution\" 。 当组数 ``groups`` "
"不为1时,输入通道 ``in_channels`` 和输出通道 ``out_channels`` 必须能被 ``groups`` 整除， "
"权值矩阵的形状应为  `(groups, out_channel // groups, in_channels // groups, "
"height, width)` 。"

#: megengine.functional.nn.conv_bias_activation:21
#: megengine.functional.quantized.batch_conv_bias_activation:21
#: megengine.functional.quantized.conv_bias_activation:21 of
msgid ""
"supports 'CROSS_CORRELATION' or 'CONVOLUTION'. Default: "
"'CROSS_CORRELATION'"
msgstr "支持 'CROSS_CORRELATION' 或者 'CONVOLUTION'. 默认: 'CROSS_CORRELATION'"

#: megengine.functional.nn.conv_bias_activation:23
#: megengine.functional.quantized.batch_conv_bias_activation:23
#: megengine.functional.quantized.conv_bias_activation:23 of
msgid "support for ``np.dtype``, Default: np.int8"
msgstr "支持np.dtype， 默认：np.int8"

#: megengine.functional.nn.conv2d:28
#: megengine.functional.nn.conv_bias_activation:26
#: megengine.functional.nn.conv_transpose2d:28
#: megengine.functional.quantized.batch_conv_bias_activation:26
#: megengine.functional.quantized.conv_bias_activation:26 of
msgid ""
"when set to \"DEFAULT\", no special requirements will be placed on the "
"precision of intermediate results. When set to \"FLOAT32\", \"Float32\" "
"would be used for accumulator and intermediate result, but only effective"
" when input and output are of Float16 dtype."
msgstr ""
"当该值设置为 'DEFAULT' 时，对中间结果的精度不做特殊要求。当设置为 'FLOAT32' 时，累加器和中间结果将使用 Float32 "
"类型，但该设置仅当输入和输出为 Float16 类型时有效。"

#: megengine.functional.nn.embedding:1 of
msgid "Applies lookup table for embedding."
msgstr "应用查找表进行 embedding。"

#: megengine.functional.nn.embedding:4 of
msgid "tensor with indices."
msgstr "带有索引的张量。"

#: megengine.functional.nn.embedding:6 of
msgid "learnable weights which embeds from."
msgstr "嵌入的可学习的词向量矩阵。"

#: megengine.functional.nn.embedding:8 megengine.functional.nn.embedding:10
#: megengine.functional.nn.embedding:12 of
msgid "should be set to None, not supported now."
msgstr "应设置为None，当前尚不支持。"

#: megengine.functional.nn.embedding:15 of
msgid "Refer to :class:`~.Embedding` for more information."
msgstr "更多信息参见 :class:`~.Embedding` 。"

#: megengine.functional.nn.interpolate:1 of
msgid ""
"Down/up samples the input tensor to either the given size or with the "
"given scale_factor. ``size`` can not coexist with ``scale_factor``."
msgstr ""
"按照给定的 ``size`` 或 ``scale_factor`` 对输入张量进行向下/向上采样。``size`` 不可以与 "
"``scale_factor`` 共存。"

#: megengine.functional.nn.interpolate:6 of
msgid "size of the output tensor. Default: None"
msgstr "输出张量的形状。 默认：None"

#: megengine.functional.nn.interpolate:8 of
msgid "scaling factor of the output tensor. Default: None"
msgstr "输出张量的放缩参数。默认：None"

#: megengine.functional.nn.interpolate:10 of
msgid ""
"interpolation methods, acceptable values are: \"BILINEAR\", \"LINEAR\". "
"Default: \"BILINEAR\""
msgstr "插值方法，可接受的值有：\"BILINEAR\", \"LINEAR\"。默认：\"BILINEAR\""

#: megengine.functional.nn.linear:1 of
msgid "Applies a linear transformation to the input tensor."
msgstr "对输入张量进行线性变换。"

#: megengine.functional.nn.linear:3 of
msgid "Refer to :class:`~.module.linear.Linear` for more information."
msgstr "更多信息参见 :class:`~.module.linear.Linear`。"

#: megengine.functional.nn.linear:6 of
msgid "input tensor with shape `(N, in_features)`."
msgstr "形状为 `(N, in_features)` 的输入张量。"

#: megengine.functional.nn.linear:8 of
msgid "weight with shape `(out_features, in_features)`."
msgstr "形状为 `(out_features, in_features)` 的权重张量。"

#: megengine.functional.nn.linear:10 of
msgid "bias with shape `(out_features,)`. Default: None"
msgstr "形状为 `(out_features,)` 的偏置张量。默认：None"

#: megengine.functional.nn.nms:1 of
msgid ""
"Performs non-maximum suppression (NMS) on the boxes according to their "
"intersection-over-union(IoU)."
msgstr "根据小方框的 IoU 值进行 非最大值抑制（NMS）。"

#: megengine.functional.nn.nms:4 of
msgid ""
"tensor of shape `(N, 4)`; the boxes to perform nms on; each box is "
"expected to be in `(x1, y1, x2, y2)` format."
msgstr "形状为 `(N, 4)` 的张量；表示所有会被进行 nms 的小方框；每个小方框期望的格式为 `(x1, y1, x2, y2)`。"

#: megengine.functional.nn.nms:6 of
msgid "IoU threshold for overlapping."
msgstr "IoU 重叠的阈值。"

#: megengine.functional.nn.nms:8 of
msgid "tensor of shape `(N,)`, the score of boxes."
msgstr "形状为 `(N,)` 的张量，表示小方块的分值。"

#: megengine.functional.nn.nms:10 of
msgid ""
"the maximum number of boxes to keep; it is optional if this operator is "
"not traced otherwise it required to be specified; if it is not specified,"
" all boxes are kept."
msgstr "将要保留的小方框的最大数目；如果这个算子未被追溯则此参数是可选的，否则必须指定；如果未被指定，所有的小方框都会被保留。"

#: megengine.functional.nn.nms:13 of
msgid "indices of the elements that have been kept by NMS."
msgstr "NMS 保留的元素的索引。"

#: megengine.functional.nn.roi_align:1 of
msgid "Applies roi align on input feature."
msgstr "对输入进行 roi align。"

#: megengine.functional.nn.roi_align:4 of
msgid "tensor that represents the input feature, shape is `(N, C, H, W)`."
msgstr "表示输入特征的张量，形状为 `(N, C, H, W)`。"

#: megengine.functional.nn.roi_align:6 of
msgid ""
"`(N, 5)` boxes. First column is the box index. The other 4 columns are "
"``xyxy``."
msgstr "`(N, 5)` 的小方框。第一列为方框的索引，其余四列的格式是 ``xyxy``。"

#: megengine.functional.nn.roi_align:8 of
msgid "`(height, width)` shape of output rois feature."
msgstr "输出的 rois 特征的形状 `(height, width)`。"

#: megengine.functional.nn.roi_align:10 of
msgid ""
"\"max\" or \"average\", use max/average align just like max/average "
"pooling. Default: \"average\""
msgstr "\"max\" 或者 \"average\"，如同最大值/平均池化一样使用最大值/平均 align。默认：\"average\""

#: megengine.functional.nn.roi_align:12 megengine.functional.nn.roi_pooling:12
#: of
msgid "scale the input boxes by this number. Default: 1.0"
msgstr "使用这个数值放缩输入框。默认：1.0"

#: megengine.functional.nn.roi_align:14 of
msgid ""
"number of inputs samples to take for each output sample. 0 to take "
"samples densely. Default: 2"
msgstr "每个输出样本要采取的输入样本数。0 表示密集采样。默认：2"

#: megengine.functional.nn.roi_align:17 of
msgid ""
"wheather to align the input feature, with `aligned=True`, we first "
"appropriately scale the ROI and then shift it by -0.5. Default: True"
msgstr "是否对齐输入特征，如果 `aligned=True`，首先选取合适的参数放缩 ROI 然后以 -0.5 的偏移量进行偏移。默认：True"

#: megengine.functional.nn.roi_pooling:1 of
msgid "Applies roi pooling on input feature."
msgstr "对输入进行 roi pooling。"

#: megengine.functional.nn.roi_pooling:4 of
msgid "tensor that represents the input feature, `(N, C, H, W)` images."
msgstr "表示输入特征的张量，形为 `(N, C, H, W)` 的图片。"

#: megengine.functional.nn.roi_pooling:6 of
msgid ""
"`(K, 5)` boxes. First column is the index into N. The other 4 columns are"
" xyxy."
msgstr "形为(K，5)的box。第一列是N的索引，其它4列分别是xyxy。"

#: megengine.functional.nn.roi_pooling:8 of
msgid "`(height, width)` of output rois feature."
msgstr "输出 rois 特征的形状， `(height, width)`。"

#: megengine.functional.nn.roi_pooling:10 of
msgid ""
"\"max\" or \"average\", use max/average align just like max/average "
"pooling. Default: \"max\""
msgstr "\"max\" 或者 \"average\", 像使用最大/平均池化一样使用 max/average pooling。 默认： \"max\""

#: megengine.functional.nn.roi_pooling:14 of
msgid "`(K, C, output_shape[0], output_shape[1])` feature of rois."
msgstr "rois 的特征，形为 `(K, C, output_shape[0], output_shape[1])`。"

#: megengine.functional.nn.sync_batch_norm:1 of
msgid "Applies synchronized batch normalization to the input."
msgstr "对输入进同步批标准化。"

#: megengine.functional.nn.batch_norm:3
#: megengine.functional.nn.sync_batch_norm:3 of
msgid ""
"Refer to :class:`~.BatchNorm2d` and :class:`~.BatchNorm1d` for more "
"information."
msgstr "更多信息参见 :class:`~.BatchNorm2d` 和 :class:`~.BatchNorm1d` 。"

#: megengine.functional.nn.batch_norm:8
#: megengine.functional.nn.sync_batch_norm:8 of
msgid "tensor to store running mean."
msgstr "存储运行中的均值的张量。"

#: megengine.functional.nn.batch_norm:10
#: megengine.functional.nn.sync_batch_norm:10 of
msgid "tensor to store running variance."
msgstr "存储运行中的方差的张量。"

#: megengine.functional.nn.batch_norm:12
#: megengine.functional.nn.sync_batch_norm:12 of
msgid ""
"scaling tensor in the learnable affine parameters. See :math:`\\gamma` in"
" :class:`~.BatchNorm2d`."
msgstr "可学习仿射参数中的放缩张量。可参阅 :class:`~.BatchNorm2d` 中的 :math:`\\gamma`"

#: megengine.functional.nn.batch_norm:15
#: megengine.functional.nn.sync_batch_norm:15 of
msgid ""
"bias tensor in the learnable affine parameters. See :math:`\\beta` in "
":class:`~.BatchNorm2d`."
msgstr "可学习仿射参数中的偏置张量。可参阅 :class:`~.BatchNorm2d` 中的 :math:`eta`"

#: megengine.functional.nn.sync_batch_norm:18 of
msgid ""
"a boolean value to indicate whether batch norm is performed in traning "
"mode. Default: False"
msgstr "一个布尔值，它表示是否执行训练模式下的批归一化，即对当前批数据进行统计并更新统计量。 默认： False"

#: megengine.functional.nn.batch_norm:21
#: megengine.functional.nn.sync_batch_norm:21 of
msgid ""
"value used for the ``running_mean`` and ``running_var`` computation. "
"Default: 0.9"
msgstr "用于计算 ``running_mean`` 和 ``running_var`` 的值。 默认： 0.9"

#: megengine.functional.nn.batch_norm:25
#: megengine.functional.nn.sync_batch_norm:25 of
msgid "a value added to the denominator for numerical stability. Default: 1e-5"
msgstr "为提高数值稳定性而添加到分母中的值。 默认： 1e-5"

#: megengine.functional.nn.adaptive_avg_pool2d:1 of
msgid "Applies a 2D average adaptive pooling over an input."
msgstr "对输入进行二维平均池化。"

#: megengine.functional.nn.adaptive_avg_pool2d:3 of
msgid "Refer to :class:`~.AvgAdaptivePool2d` for more information."
msgstr "更多信息参见 :class:`~.AvgPool2d`。"

#: megengine.functional.nn.adaptive_avg_pool2d:8
#: megengine.functional.nn.adaptive_max_pool2d:8 of
msgid "`(OH, OW)` size of the output shape."
msgstr "输出图像的大小 `(OH, OW)`。"

#: megengine.functional.nn.adaptive_max_pool2d:1 of
msgid "Applies a 2D max adaptive pooling over an input."
msgstr "对输入张量进行二维最大池化。"

#: megengine.functional.nn.adaptive_max_pool2d:3 of
msgid "Refer to :class:`~.MaxAdaptivePool2d` for more information."
msgstr "更多信息参见 :class:`~.MaxPool2d`。"

#: megengine.functional.nn.avg_pool2d:1 of
msgid "Applies 2D average pooling over an input tensor."
msgstr "对输入进行二维平均池化。"

#: megengine.functional.nn.avg_pool2d:3 of
msgid "Refer to :class:`~.AvgPool2d` for more information."
msgstr "更多信息参见 :class:`~.AvgPool2d`。"

#: megengine.functional.nn.avg_pool2d:8 megengine.functional.nn.max_pool2d:8 of
msgid "size of the window."
msgstr "窗口的尺寸。"

#: megengine.functional.nn.avg_pool2d:10 of
msgid ""
"stride of the window. If not provided, its value is set to "
"``kernel_size``. Default: None"
msgstr "窗口的步长。 如果该值没有给出，则将值设置为 ``kernel_size`` 。默认： None"

#: megengine.functional.nn.avg_pool2d:13 megengine.functional.nn.max_pool2d:13
#: of
msgid "implicit zero padding added on both sides. Default: 0"
msgstr "添加在每一侧的隐含零值填充。 默认：0"

#: megengine.functional.nn.avg_pool2d:15 of
msgid ""
"whether to count padding values. Default: "
"\"AVERAGE_COUNT_EXCLUDE_PADDING\""
msgstr "是否把填充值计算在内。默认：\"AVERAGE_COUNT_EXCLUDE_PADDING\""

#: megengine.functional.nn.batch_norm:1 of
msgid "Applies batch normalization to the input."
msgstr "对输入进行批标准化。"

#: megengine.functional.nn.batch_norm:18 of
msgid ""
"a boolean value to indicate whether batch norm is performed in training "
"mode. Default: False"
msgstr "一个布尔值，它表示是否执行训练模式下的批归一化，即对当前批数据进行统计并更新统计量。 默认： ``False``"

#: megengine.functional.nn.batch_norm:28 of
msgid ""
"whether to update ``running_mean`` and ``running_var`` inplace or return "
"new tensors Default: True"
msgstr "是否要原地更新 ``running_mean`` 和 ``running_var``，否则返回一个新张量。默认：True"

#: megengine.functional.nn.conv1d:1 of
msgid "1D convolution operation."
msgstr "一维卷积运算。"

#: megengine.functional.nn.conv1d:3 of
msgid "Refer to :class:`~.Conv1d` for more information."
msgstr "更多信息参见 :class:`~.Conv1d` 。"

#: megengine.functional.nn.conv1d:6 of
msgid "The feature map of the convolution operation"
msgstr "卷积运算的特征图。"

#: megengine.functional.nn.conv1d:8 of
msgid "The convolution kernel"
msgstr "卷积核。"

#: megengine.functional.nn.conv1d:10 of
msgid "The bias added to the result of convolution (if given)"
msgstr "添加到卷积结果中的偏置量(如果给定该值)"

#: megengine.functional.nn.conv1d:12 of
msgid "Stride of the 1D convolution operation. Default: 1"
msgstr "一维卷积运算中的步长。 默认： 1"

#: megengine.functional.nn.conv1d:14 of
msgid ""
"Size of the paddings added to the input on both sides of its spatial "
"dimensions. Only zero-padding is supported. Default: 0"
msgstr "在输入值的空间维度上每一侧填充的尺寸。 仅支持用零值填充。 默认： 0"

#: megengine.functional.nn.conv1d:17 of
msgid "Dilation of the 1D convolution operation. Default: 1"
msgstr "一维卷积运算的扩张值(dilation)。 默认： 1"

#: megengine.functional.nn.conv1d:19 of
msgid ""
"number of groups to divide input and output channels into, so as to "
"perform a \"grouped convolution\". When ``groups`` is not 1, "
"``in_channels`` and ``out_channels`` must be divisible by ``groups``, and"
" the shape of weight should be ``(groups, out_channel // groups, "
"in_channels // groups, height, width)``."
msgstr ""
"将输入和输出通道划分成的组数, 以便执行分组卷积 \"grouped convolution\" 。 当组数 ``groups`` "
"不为1时,输入通道 ``in_channels`` 和输出通道 ``out_channels`` 必须能被 ``groups`` 整除， "
"权值矩阵的形状应为  `(groups, out_channel // groups, in_channels // groups, "
"height, width)` 。"

#: megengine.functional.nn.conv1d:25 of
msgid "Supports 'CROSS_CORRELATION'. Default: 'CROSS_CORRELATION'."
msgstr "支持 'CROSS_CORRELATION'。默认：'CROSS_CORRELATION'。"

#: megengine.functional.nn.conv1d:29 of
msgid ""
"When set to 'DEFAULT', no special requirements will be placed on the "
"precision of intermediate results. When set to 'FLOAT32', Float32 would "
"be used for accumulator and intermediate result, but only effective when "
"input and output are of Float16 dtype."
msgstr ""
"当该值设置为 'DEFAULT' 时，对中间结果的精度不做特殊要求。当设置为 'FLOAT32' 时，累加器和中间结果将使用 Float32 "
"类型，但该设置仅当输入和输出为 Float16 类型时有效。"

#: megengine.functional.nn.conv2d:1 of
msgid "2D convolution operation."
msgstr "二维卷积运算。"

#: megengine.functional.nn.conv2d:3 of
msgid "Refer to :class:`~.Conv2d` for more information."
msgstr "更多信息参见 :class:`~.Conv2d` 。"

#: megengine.functional.nn.conv2d:10
#: megengine.functional.nn.conv_transpose2d:10 of
msgid "bias added to the result of convolution (if given)."
msgstr "添加到卷积结果中的偏置量(如果给定该值)"

#: megengine.functional.nn.conv2d:19 of
msgid ""
"number of groups into which the input and output channels are divided, so"
" as to perform a ``grouped convolution``. When ``groups`` is not 1, "
"``in_channels`` and ``out_channels`` must be divisible by ``groups``, and"
" the shape of weight should be `(groups, out_channel // groups, "
"in_channels // groups, height, width)`."
msgstr ""
"将输入和输出通道划分成的组数, 以便执行分组卷积 \"grouped convolution\" 。 当组数 ``groups`` "
"不为1时,输入通道 ``in_channels`` 和输出通道 ``out_channels`` 必须能被 ``groups`` 整除， "
"权值矩阵的形状应为  `(groups, out_channel // groups, in_channels // groups, "
"height, width)` 。"

#: megengine.functional.nn.conv2d:24
#: megengine.functional.nn.conv_transpose2d:24 of
msgid "supports \"CROSS_CORRELATION\". Default: \"CROSS_CORRELATION\""
msgstr "支持 \"CROSS_CORRELATION\"。默认：\"CROSS_CORRELATION\""

#: megengine.functional.nn.conv_transpose2d:1 of
msgid "2D transposed convolution operation."
msgstr "二维转置卷积运算。"

#: megengine.functional.nn.conv_transpose2d:3 of
msgid "Refer to :class:`~.ConvTranspose2d` for more information."
msgstr "更多信息参见 :class:`~.ConvTranspose2d` 。"

#: megengine.functional.nn.conv_transpose2d:19 of
msgid ""
"number of groups into which the input and output channels are divided, so"
" as to perform a ``grouped convolution``. When ``groups`` is not 1, "
"``in_channels`` and ``out_channels`` must be divisible by groups, and the"
" shape of weight should be `(groups, out_channel // groups, in_channels "
"// groups, height, width)`. Default: 1"
msgstr ""
"将输入和输出通道划分成的组数, 以便执行分组卷积 \"grouped convolution\" 。 当组数 ``groups`` "
"不为1时,输入通道 ``in_channels`` 和输出通道 ``out_channels`` 必须能被 ``groups`` 整除， "
"权值矩阵的形状应为  `(groups, out_channel // groups, in_channels // groups, "
"height, width)` 。默认：1"

#: megengine.functional.nn.dot:1 of
msgid ""
"Computes dot-product of two vectors ``inp1`` and ``inp2``. inputs must be"
" 1-dimensional or scalar. A scalar input is automatically broadcasted. "
"Refer to :func:`~.matmul` for more general usage."
msgstr ""
"计算两个向量 ``inp1`` 和 ``inp2`` 的点积。输入必须是1维或标量，标量会被自动广播。"
"在 :func:`~.matmul` 查看更加通用的乘法。"

#: megengine.functional.nn.dot:6 of
msgid "first vector."
msgstr "第一个向量"

#: megengine.functional.nn.dot:8 of
msgid "second vector."
msgstr "第二个向量"

#: megengine.functional.nn.dot:10 of
msgid "output value."
msgstr "输出值"

#: megengine.functional.nn.dropout:1 of
msgid ""
"Returns a new tensor where each of the elements are randomly set to zero "
"with probability P = ``drop_prob``. Optionally rescale the output tensor "
"if ``training`` is True."
msgstr "返回一个新张量，其中每个元素按概率 P = ``drop_prob`` =``drop_prob`` 随机被设置为零。可以选择是否重新缩放输出张量。"

#: megengine.functional.nn.dropout:7 of
msgid "probability to drop (set to zero) a single element."
msgstr "丢弃单个元素(将其设置为0)的概率"

#: megengine.functional.nn.dropout:9 of
msgid ""
"the default behavior of ``dropout`` during training is to rescale the "
"output, then it can be replaced by an :class:`~.Identity` during "
"inference. Default: True"
msgstr ""
"``dropout`` 在训练阶段的默认操作是 重新缩放输出张量, 这样它就可以在推理过程中被一个 :class:`~.Identity` 代替,"
" 默认值：True"

#: megengine.functional.nn.dropout:12 of
msgid "the output tensor"
msgstr "输出张量"

#: megengine.functional.nn.indexing_one_hot:1 of
msgid "One-hot indexing for some axes."
msgstr "对一些轴进行One-hot索引。"

#: megengine.functional.nn.indexing_one_hot:6 of
msgid "index tensor."
msgstr "索引张量。"

#: megengine.functional.nn.indexing_one_hot:8 of
msgid "axis on src for which values in index index. Default: 1"
msgstr "源数据上的轴，索引值为其索引。 默认： 1"

#: megengine.functional.nn.indexing_one_hot:9 of
msgid "whether not to remove the axis in result. Default: False"
msgstr "是否在结果数据中删除该轴。 默认： ``False`` "

#: megengine.functional.nn.leaky_relu:1 of
msgid "Applies the element-wise leaky_relu function"
msgstr "逐元素使用leaky_relu函数"

#: megengine.functional.nn.leaky_relu:3 of
msgid "Refer to :class:`~.LeakyReLU` for more information."
msgstr "更多信息参见 :class:`~.LeakyReLU` 。"

#: megengine.functional.nn.local_conv2d:1 of
msgid ""
"Applies spatial 2D convolution over an groupped channeled image with "
"untied kernels."
msgstr "使用untied kernels对图像进行二维空域卷积。"

#: megengine.functional.nn.logsigmoid:1 megengine.functional.nn.softplus:1 of
msgid "Applies the element-wise function:"
msgstr "逐元素应用函数："

#: megengine.functional.nn.logsigmoid:3 of
msgid ""
"\\text{logsigmoid}(x) = \\log(\\frac{ 1 }{ 1 + \\exp(-x)})\n"
"= \\log(1/(1 + \\exp(-x)))\n"
"= - \\log(1 + \\exp(-x))\n"
"= - \\text{softplus}(-x)\n"
"\n"
msgstr ""
"\\text{logsigmoid}(x) = \\log(\\frac{ 1 }{ 1 + \\exp(-x)})\n"
"= \\log(1/(1 + \\exp(-x)))\n"
"= - \\log(1 + \\exp(-x))\n"
"= - \\text{softplus}(-x)\n"
"\n"

#: megengine.functional.nn.logsoftmax:1 of
msgid ""
"Applies the :math:`\\log(\\text{softmax}(x))` function to an "
"n-dimensional input tensor. The :math:`\\text{logsoftmax}(x)` formulation"
" can be simplified as:"
msgstr ""
"对一个n维的输入张量做 :math:`\\log(\\text{softmax}(x))` 函数 "
":math:`\\text{logsoftmax}(x)` 的公式可以简化为："

#: megengine.functional.nn.logsoftmax:4 of
msgid ""
"\\text{logsoftmax}(x_{i}) = \\log(\\frac{\\exp(x_i) }{ \\sum_j "
"\\exp(x_j)} )\n"
"\n"
msgstr ""
"\\text{logsoftmax}(x_{i}) = \\log(\\frac{\\exp(x_i) }{ \\sum_j "
"\\exp(x_j)} )\n"
"\n"

#: megengine.functional.nn.logsoftmax:7 of
msgid "For numerical stability the implementation follows this transformation:"
msgstr "为了提高数值稳定性，实现根据以下的变换："

#: megengine.functional.nn.logsoftmax:9 of
msgid ""
"\\text{logsoftmax}(x)\n"
"= \\log (\\frac{\\exp (x)}{\\sum_{i}(\\exp (x_{i}))})\n"
"= x - \\log (\\sum_{i}(\\exp (x_{i})))\n"
"= x - \\text{logsumexp}(x)\n"
"\n"
msgstr ""
"\\text{logsoftmax}(x)\n"
"= \\log (\\frac{\\exp (x)}{\\sum_{i}(\\exp (x_{i}))})\n"
"= x - \\log (\\sum_{i}(\\exp (x_{i})))\n"
"= x - \\text{logsumexp}(x)\n"
"\n"

#: megengine.functional.nn.logsoftmax:18 of
msgid "axis along which :math:`\\text{logsoftmax}(x)` will be applied."
msgstr "沿着该维度应用 :math:`\\text{logsoftmax}(x)`。"

#: megengine.functional.nn.logsumexp:1 of
msgid ""
"Calculates the logarithm of the inputs' exponential sum along the given "
":attr:`axis`."
msgstr "计算输入数据沿给定维度 :attr:`axis` 的指数之和的对数。该计算是数值稳定的。"

#: megengine.functional.nn.logsumexp:3 of
msgid "\\text{logsumexp}(x)= \\log \\sum_{j=1}^{n} \\exp \\left(x_{j}\\right)"
msgstr "\\text{logsumexp}(x)= \\log \\sum_{j=1}^{n} \\exp \\left(x_{j}\\right)"

#: megengine.functional.nn.logsumexp:7 of
msgid "For numerical stability, the implementation follows this transformation:"
msgstr "为了提高数值稳定性，实现根据以下的变换："

#: megengine.functional.nn.logsumexp:9 of
msgid ""
"\\text{logsumexp}(x)= \\log \\sum_{j=1}^{n} \\exp \\left(x_{j}\\right)\n"
"= \\text{logsumexp}(x)=b+\\log \\sum_{j=1}^{n} \\exp "
"\\left(x_{j}-b\\right)"
msgstr ""
"\\text{logsumexp}(x)= \\log \\sum_{j=1}^{n} \\exp \\left(x_{j}\\right)\n"
"= \\text{logsumexp}(x)=b+\\log \\sum_{j=1}^{n} \\exp "
"\\left(x_{j}-b\\right)"

#: megengine.functional.nn.logsumexp:16 of
msgid ""
"b = \\max(x_j)\n"
"\n"
msgstr "b = \\max(x_j)"

#: megengine.functional.nn.logsumexp:22 of
msgid "axis over which the sum is taken. It could be single axis or list of axes."
msgstr "求和计算所在的维度。可以是单个维度或维度的列表。"

#: megengine.functional.nn.logsumexp:24 of
msgid "whether to retain :attr:`axis` or not for the output tensor."
msgstr "输出张量是否保留 :attr:`axis` 。"

#: megengine.functional.nn.matmul:1 of
msgid "Performs a matrix multiplication of the matrices ``inp1`` and ``inp2``."
msgstr "对矩阵 ``inp1`` 和 ``inp2`` 进行矩阵乘法。"

#: megengine.functional.nn.matmul:3 of
msgid "With different inputs dim, this function behaves differently:"
msgstr "当输入的dim不同时，执行的函数是不同的："

#: megengine.functional.nn.matmul:5 of
msgid "Both 1-D tensor, simply forward to ``dot``."
msgstr "都是1维张量，此时等价于点积运算。"

#: megengine.functional.nn.matmul:6 of
msgid "Both 2-D tensor, normal matrix multiplication."
msgstr "都是2维张量，此时是普通的矩阵乘法。"

#: megengine.functional.nn.matmul:7 of
msgid "If one input tensor is 1-D, matrix vector multiplication."
msgstr "如果其中一个输入张量是1维的，此时是一个矩阵和一个向量相乘。"

#: megengine.functional.nn.matmul:8 of
msgid ""
"If at least one tensor are 3-dimensional or >3-dimensional, the other "
"tensor should have dim >= 2, the batched matrix-matrix is returned, and "
"the tensor with smaller dimension will be broadcasted. For example:"
msgstr "如果至少有一个张量是3维的或大于3维的，此时会进行批矩阵乘法，低维的张量会被广播。例如："

#: megengine.functional.nn.matmul:10 of
msgid "inp1: `(n, k, m)`, inp2: `(n, m, p)`, return: `(n, k, p)`"
msgstr "inp1: `(n, k, m)`, inp2: `(n, m, p)`, 返回: `(n, k, p)`"

#: megengine.functional.nn.matmul:11 of
msgid "inp1: `(n, k, m)`, inp2: `(m, p)`, return: `(n, k, p)`"
msgstr "inp1: `(n, k, m)`, inp2: `(m, p)`, 返回: `(n, k, p)`"

#: megengine.functional.nn.matmul:12 of
msgid "inp1: `(n, j, k, m)`, inp2: `(n, j, m, p)`, return: `(n, j, k, p)`"
msgstr "inp1: `(n, j, k, m)`, inp2: `(n, j, m, p)`, 返回: `(n, j, k, p)`"

#: megengine.functional.nn.matmul:15 of
msgid "first matrix to be multiplied."
msgstr "相乘计算中的第一个矩阵。"

#: megengine.functional.nn.matmul:17 of
msgid "second matrix to be multiplied."
msgstr "相乘计算中的第二个矩阵。"

#: megengine.functional.nn.max_pool2d:1 of
msgid "Applies a 2D max pooling over an input tensor."
msgstr "对输入张量进行二维最大池化。"

#: megengine.functional.nn.max_pool2d:3 of
msgid "Refer to :class:`~.MaxPool2d` for more information."
msgstr "更多信息参见 :class:`~.MaxPool2d`。"

#: megengine.functional.nn.max_pool2d:10 of
msgid ""
"stride of the window. If not provided, its value is set to kernel_size. "
"Default: None"
msgstr "窗口的步长。 如果该值没有给出，则将值设置为 ``kernel_size`` 。默认：None"

#: megengine.functional.nn.one_hot:1 of
msgid "Performs one-hot encoding for the input tensor."
msgstr "对输入张量进行 one-hot 编码。"

#: megengine.functional.nn.one_hot:6 of
msgid "number of classes denotes the last dimension of the output tensor."
msgstr "表示输出张量最后一个维度的类数。"

#: megengine.functional.nn.prelu:1 of
msgid "Applies the element-wise PReLU function."
msgstr "逐元素使用 PReLU 函数。"

#: megengine.functional.nn.prelu:3 of
msgid "Refer to :class:`~.PReLU` for more information."
msgstr "更多信息参见 :class:`~.PReLU` 。"

#: megengine.functional.nn.remap:1 of
msgid "Applies remap transformation to batched 2D images."
msgstr "对按批组织的二维图像进行重映射变换。"

#: megengine.functional.nn.remap:3 of
msgid ""
"The input images are transformed to the output images by the tensor "
"map_xy. The output's H and W are same as map_xy's H and W."
msgstr "输入图像通过张量 ``map_xy`` 变换为输出图像。输出的高度与宽度与 ``map_xy`` 中一致。"

#: megengine.functional.nn.remap:7 of
msgid "input image"
msgstr "输入图像"

#: megengine.functional.nn.remap:9 of
msgid "(batch, oh, ow, 2) transformation matrix"
msgstr "(batch, oh, ow, 2) 变换矩阵。"

#: megengine.functional.nn.remap:11 megengine.functional.nn.warp_perspective:18
#: of
msgid ""
"pixel extrapolation method. Default: \"REPLICATE\". Currently also "
"support \"CONSTANT\", \"REFLECT\", \"REFLECT_101\", \"WRAP\"."
msgstr ""
"像素外推方法。默认：\"REPLICATE\"。当前也支持\"CONSTANT\"， \"REFLECT\"， \"REFLECT_101\"， "
"\"WRAP\"。"

#: megengine.functional.nn.remap:15 megengine.functional.nn.warp_perspective:22
#: of
msgid "value used in case of a constant border. Default: 0"
msgstr "边界填充值。 默认：0"

#: megengine.functional.nn.remap:17 megengine.functional.nn.warp_perspective:24
#: of
msgid ""
"interpolation methods. Default: \"LINEAR\". Currently only support "
"\"LINEAR\" mode."
msgstr "插值方法。默认：\"LINEAR\"。当前只支持 \"LINEAR\" 模式。"

#: megengine.functional.nn.softmax:1 of
msgid ""
"Applies a :math:`\\text{softmax}(x)` function. :math:`\\text{softmax}(x)`"
" is defined as:"
msgstr "使用 :math:`\\text{softmax}(x)` 函数。:math:`\\text{softmax}(x)` 被定义为："

#: megengine.functional.nn.softmax:3 of
msgid ""
"\\text{softmax}(x_{i}) = \\frac{\\exp(x_i)}{\\sum_j \\exp(x_j)}\n"
"\n"
msgstr ""
"\\text{softmax}(x_{i}) = \\frac{\\exp(x_i)}{\\sum_j \\exp(x_j)}\n"
"\n"

#: megengine.functional.nn.softmax:6 of
msgid ""
"It is applied to all elements along axis, and rescales elements so that "
"they stay in the range `[0, 1]` and sum to 1."
msgstr "这将应用到该轴的所有元素上，并重新缩放这些元素使其能够处于 `[0, 1]` 的范围内并且和为1。"

#: megengine.functional.nn.softmax:9 of
msgid "See :class:`~megengine.module.activation.Softmax` for more details."
msgstr "更多信息参见 :class:`~megengine.module.activation.Softmax` 。"

#: megengine.functional.nn.softmax:14 of
msgid ""
"an axis along which :math:`\\text{softmax}(x)` will be applied. By "
"default, :math:`\\text{softmax}(x)` will apply along the highest ranked "
"axis."
msgstr ""
"在该轴上使用 :math:`\\text{softmax}(x)` 方法。默认情况下，:math:`\\text{softmax}(x)` "
"将在序号最大的轴上使用。"

#: megengine.functional.nn.softplus:3 of
msgid ""
"\\text{softplus}(x) = \\log(1 + \\exp(x))\n"
"\n"
msgstr ""
"\\text{softplus}(x) = \\log(1 + \\exp(x))\n"
"\n"

#: megengine.functional.nn.softplus:6 of
msgid ""
"softplus is a smooth approximation to the ReLU function and can be used "
"to constrain the output to be always positive. For numerical stability "
"the implementation follows this transformation:"
msgstr "softplus 是 ReLU 函数的一个平滑的近似，可以被用来保证机器的输出一定是正数。为了提高数值稳定性，实现根据以下变换："

#: megengine.functional.nn.softplus:10 of
msgid ""
"\\text{softplus}(x) = \\log(1 + \\exp(x))\n"
"                   = \\log(1 + \\exp(-\\text{abs}(x))) + \\max(x, 0)\n"
"                   = \\log1p(\\exp(-\\text{abs}(x))) + \\text{relu}(x)\n"
"\n"
msgstr ""
"\\text{softplus}(x) = \\log(1 + \\exp(x))\n"
"                   = \\log(1 + \\exp(-\\text{abs}(x))) + \\max(x, 0)\n"
"                   = \\log1p(\\exp(-\\text{abs}(x))) + \\text{relu}(x)\n"
"\n"

#: megengine.functional.nn.svd:1 of
msgid "Computes the singular value decompositions of input matrix."
msgstr "对输入矩阵 ``inp`` 进行奇异值分解。"

#: megengine.functional.nn.svd:4 of
msgid "input matrix, must has shape `[..., M, N]`."
msgstr "输入矩阵，形状必须是 ``[..., M, N]``。"

#: megengine.functional.nn.svd:6 of
msgid "output matrices, `(U, sigma, V)`."
msgstr "输出矩阵 `(U, sigma, V)`。"

#: megengine.functional.nn.warp_perspective:1 of
msgid "Applies perspective transformation to batched 2D images."
msgstr "对按批组织的二维图像进行透视变换。"

#: megengine.functional.nn.warp_perspective:3 of
msgid ""
"The input images are transformed to the output images by the "
"transformation matrix:"
msgstr "输入图像通过变换矩阵变换为输出图像："

#: megengine.functional.nn.warp_perspective:5 of
msgid ""
"\\text{output}(n, c, h, w) = \\text{input} \\left( n, c,\n"
"    \\frac{M_{00}h + M_{01}w + M_{02}}{M_{20}h + M_{21}w + M_{22}},\n"
"    \\frac{M_{10}h + M_{11}w + M_{12}}{M_{20}h + M_{21}w + M_{22}}\n"
"    \\right)\n"
"\n"
msgstr ""
"\\text{output}(n, c, h, w) = \\text{input} \\left( n, c,\n"
"    \\frac{M_{00}h + M_{01}w + M_{02}}{M_{20}h + M_{21}w + M_{22}},\n"
"    \\frac{M_{10}h + M_{11}w + M_{12}}{M_{20}h + M_{21}w + M_{22}}\n"
"    \\right)\n"
"\n"

#: megengine.functional.nn.warp_perspective:12 of
msgid "input image."
msgstr "输入图像。"

#: megengine.functional.nn.warp_perspective:14 of
msgid "`(batch, 3, 3)` transformation matrix."
msgstr "(batch, 3, 3) 变换矩阵。"

#: megengine.functional.nn.warp_perspective:16 of
msgid "`(h, w)` size of the output image."
msgstr "`(h, w)` 输出图像的大小。"

#: megengine.functional.nn.warp_perspective:29 of
msgid "Note:"
msgstr "备注："

#: megengine.functional.nn.warp_perspective:31 of
msgid ""
"The transformation matrix is the inverse of that used by "
"`cv2.warpPerspective`."
msgstr "转换矩阵是 `cv2.warpPerspective` 使用的矩阵的逆矩阵。"

#: ../../source_api/zh/api/megengine.functional.rst:76
msgid "megengine.functional.quantized"
msgstr "megengine.functional.quantized"

#: megengine.functional.quantized.batch_conv_bias_activation:1 of
msgid "Batch convolution bias with activation operation, only for inference."
msgstr "带有激活操作的批卷积偏置，仅用于推断。"

#: megengine.functional.quantized.batch_conv_bias_activation:6 of
msgid "convolution kernel in batched way."
msgstr "批格式的卷积核。"

#: ../../source_api/zh/api/megengine.functional.rst:84
msgid "megengine.functional.tensor"
msgstr "megengine.functional.tensor"

#: megengine.functional.tensor.arange:1 of
msgid ""
"Returns a tensor with values from start to stop with adjacent interval "
"step."
msgstr "返回一个数值从 `start` 到  `stop` ，相邻间隔为 `step` 的张量。"

#: megengine.functional.tensor.arange:4 megengine.functional.tensor.linspace:4
#: of
msgid "starting value of the squence, shoule be scalar."
msgstr "序列的第一个值，应为标量。"

#: megengine.functional.tensor.arange:6 of
msgid "ending value of the squence, shoule be scalar."
msgstr "序列的最后一个值，应为标量。"

#: megengine.functional.tensor.arange:8 of
msgid "gap between each pair of adjacent values. Default: 1"
msgstr "每对相邻值之间的间隔。默认：1"

#: megengine.functional.tensor.arange:9 megengine.functional.tensor.linspace:9
#: of
msgid "result data type."
msgstr "结果的数据类型。"

#: megengine.functional.tensor.arange:11
#: megengine.functional.tensor.linspace:11 of
msgid "generated tensor."
msgstr "生成的张量。"

#: megengine.functional.tensor.broadcast_to:1 of
msgid "Broadcasts a tensor to given shape."
msgstr "将张量广播至指定的形状。"

#: megengine.functional.tensor.broadcast_to:6 of
msgid "target shape."
msgstr "目标形状。"

#: megengine.functional.tensor.concat:1 of
msgid "Concat some tensors"
msgstr "拼接一些张量"

#: megengine.functional.tensor.concat:4 of
msgid "input tensors to concat."
msgstr "将要进行拼接的输入张量。"

#: megengine.functional.tensor.concat:6 of
msgid "over which dimension the tensors are concatenated. Default: 0"
msgstr "对张量进行拼接的维度。默认：0"

#: megengine.functional.tensor.concat:7 of
msgid "which device output will be. Default: None"
msgstr "输出所在的计算节点。 默认：None"

#: megengine.functional.tensor.cond_take:1 of
msgid ""
"Takes elements from data if specific condition is satisfied on mask. This"
" operator has two outputs: the first is the elements taken, and the "
"second is the indices corresponding to those elements; they are both "
"1-dimensional. High-dimension input would first be flattened."
msgstr "如果在mask上满足了特定条件，则从数据中取出元素。此算子有两个输出：第一个是取出的元素，第二个是这些元素对应的索引；两个输出都是一维的。高维数据输入时将首先被展平。"

#: megengine.functional.tensor.cond_take:7 of
msgid "condition param; must be the same shape with data."
msgstr "条件参数；必须与数据的形状相同"

#: megengine.functional.tensor.cond_take:9 of
msgid "input tensor from which to take elements."
msgstr "将从其中取出元素的输入张量"

#: megengine.functional.tensor.expand_dims:1 of
msgid "Adds dimension before given axis."
msgstr "在给定的axis前添加维度。"

#: megengine.functional.tensor.expand_dims:6 of
msgid "place of new axes."
msgstr "若干新轴的位置"

#: megengine.functional.tensor.eye:1 of
msgid "Returns a 2D tensor with ones on the diagonal and zeros elsewhere."
msgstr "返回一个二维张量，其对角线上值均为1，其他位置值为0。"

#: megengine.functional.tensor.eye:3 of
msgid "expected shape of output tensor."
msgstr "期望的输出张量的形状。"

#: megengine.functional.tensor.eye:4 of
msgid "data type. Default: None"
msgstr "数据类型。默认：None"

#: megengine.functional.tensor.eye:6 of
msgid "compute node of the matrix. Default: None"
msgstr "矩阵的计算节点。默认：None"

#: megengine.functional.tensor.eye:8 of
msgid "eye matrix."
msgstr "单位矩阵。"

#: megengine.functional.tensor.flatten:1 of
msgid ""
"Reshapes the tensor by flattening the sub-tensor from dimension "
"``start_axis`` to dimension ``end_axis``."
msgstr "通过将子张量从 ``start_axis`` 维展平到 ``end_axis`` 维，实现对张量的重塑(reshape)。"

#: megengine.functional.tensor.flatten:6 of
msgid "start dimension that the sub-tensor to be flattened. Default: 0"
msgstr "子张量被展平时的初始维数。 默认： 0"

#: megengine.functional.tensor.flatten:8 of
msgid "end dimension that the sub-tensor to be flattened. Default: -1"
msgstr "子张量被展平时的最终维数。 默认： -1"

#: megengine.functional.tensor.full:1 of
msgid "Returns a tensor with given shape and value."
msgstr "返回一个给定形状和值的张量"

#: megengine.functional.tensor.full_like:1 of
msgid ""
"Returns a tensor filled with given value with the same shape as input "
"tensor."
msgstr "返回一个与输入张量形状相同的且值为给定值的零张量"

#: megengine.functional.tensor.gather:1 of
msgid "Gathers data from input tensor on axis using index."
msgstr "使用 :attr:`index` 从 :attr:`axis` 上的 :attr:`inp` 聚合数据。"

#: megengine.functional.tensor.gather:3 of
msgid "For a 3-D tensor, the output is specified by::"
msgstr "对于三维张量, 输出由下面内容确定::"

#: megengine.functional.tensor.gather:9 of
msgid ""
"if input tensor is a n-dimensional tensor with size "
":math:`(x_0,x_1,...,x_{i-1},x_i,x_{i+1},...,x_{n-1})` and axis=i, then "
"index must be a n-dimensional tensor with size "
":math:`(x_0,x_1,...,x_{i-1},y,x_{i+1},...,x_{n-1})` where :math:`y\\ge 1`"
" and output will have the same size as index."
msgstr ""
"如果 :attr:`inp` 是一个尺寸为  "
":math:`(x_0,x_1,...,x_{i-1},x_i,x_{i+1},...,x_{n-1})` 且 axis=i的n维张量，则 "
":attr:`index` 必须是一个尺寸为  "
":math:`(x_0,x_1,...,x_{i-1},y,x_{i+1},...,x_{n-1})` 的n维张量，这里的 "
":math:`y\\ge 1` 和输出的尺寸都必须必须与 :attr:`index` 的尺寸相同。"

#: megengine.functional.tensor.gather:18 of
msgid "along which axis to index."
msgstr "将要进行索引的轴。"

#: megengine.functional.tensor.gather:20 of
msgid "indices of elements to gather."
msgstr "将要进行聚合的元素的索引"

#: megengine.functional.tensor.linspace:1 of
msgid "Returns equally spaced numbers over a specified interval."
msgstr "返回指定间隔的等距数列。"

#: megengine.functional.tensor.linspace:6 of
msgid "last value of the squence, shoule be scalar."
msgstr "序列的最后一个值，应为标量。"

#: megengine.functional.tensor.linspace:8 of
msgid "number of values to generate."
msgstr "将要产生的值的个数。"

#: megengine.functional.tensor.ones:1 of
msgid "Returns a ones tensor with given shape."
msgstr "返回一个具有给定形状的全1张量。"

#: megengine.functional.tensor.ones:4 megengine.functional.tensor.zeros_like:6
#: of
msgid "output zero tensor."
msgstr "输出的全0张量。"

#: megengine.functional.tensor.ones_like:1 of
msgid "Returns a ones tensor with the same shape as input tensor."
msgstr "返回一个与输入张量形状相同的全1张量"

#: megengine.functional.tensor.reshape:1 of
msgid ""
"Reshapes a tensor to given target shape; total number of logical elements"
" must remain unchanged"
msgstr "将一个张量重塑为给定的目标形状；逻辑元素的总数必须保持不变"

#: megengine.functional.tensor.reshape:7 of
msgid ""
"target shape, it can contain an element of -1 representing "
"``unspec_axis``."
msgstr "目标形状，所有组件将被连接成目标形状，其中可能包含用来表示unspec_axis的值为-1的元素。"

#: megengine.functional.tensor.scatter:1 of
msgid ""
"Writes all values from the tensor source into input tensor at the indices"
" specified in the index tensor."
msgstr "把张量 :attr:`source` 中所有的值通过 :attr:`index` 张量指定的索引位置上写入到输入张量中。"

#: megengine.functional.tensor.scatter:4 of
msgid ""
"For each value in source, its output index is specified by its index in "
"source for ``axis != dimension`` and by the corresponding value in index "
"for ``axis = dimension``."
msgstr ""
"对于 :attr:`source` 中的每个值，它的输出索引在 ``axis != dimension`` 时，为 :attr:`source` "
"的索引或在 ``axis = dimension`` 时，为 :attr:`index` 中相对应的值。"

#: megengine.functional.tensor.scatter:8 of
msgid "For a 3-D tensor, input tensor is updated as::"
msgstr "对于三维张量， :attr:`inp` 将更新为::"

#: megengine.functional.tensor.scatter:14 of
msgid "``inp``, ``index`` and ``source`` should have same number of dimensions."
msgstr " :attr:`inp` ， :attr:`index` 和 :attr:`source` 应当具有相同的维数。"

#: megengine.functional.tensor.scatter:16 of
msgid ""
"It is also required that ``source.shape(d) <= inp.shape(d)`` and "
"``index.shape(d) == source.shape(d)`` for all dimensions ``d``."
msgstr ""
"在所有维度上需要满足 ``source.shape(d) <= inp.shape(d)`` 以及 ``index.shape(d) == "
"source.shape(d)`` 。"

#: megengine.functional.tensor.scatter:19 of
msgid ""
"Moreover, the values of index must be between ``0`` and ``inp.shape(axis)"
" - 1`` inclusive."
msgstr "此外， :attr:`index` 的值必须介于 ``0`` 和 ``inp.shape(axis) - 1`` 之间(包含边界)。"

#: megengine.functional.tensor.scatter:22 of
msgid ""
"Please notice that, due to performance issues, the result is uncertain on"
" the GPU device if scattering different positions from source to the same"
" destination position regard to index tensor."
msgstr "请注意，在GPU设备上，由于性能原因，若多个源数据被 index 指定同一个目标位置时，结果会不确定。"

#: megengine.functional.tensor.scatter:26 of
msgid ""
"Check the following examples, the oup[0][2] is maybe from source[0][2] "
"which value is 0.2256 or source[1][2] which value is 0.5339 if set the "
"index[1][2] from 1 to 0."
msgstr "使用以下例子展示案例，如果将index[1][2]设置为1到0，则oup[0][2]可能来自值为0.2256的source[0][2]，或值为0.5339的source[1][2]。"

#: megengine.functional.tensor.scatter:31 of
msgid "inp tensor which to be scattered."
msgstr "将要进行scatter操作的inp张量。"

#: megengine.functional.tensor.scatter:33 of
msgid "axis along which to index."
msgstr "将要进行索引的轴。"

#: megengine.functional.tensor.scatter:35 of
msgid "indices of elements to scatter."
msgstr "将要进行scatter操作的元素的索引。"

#: megengine.functional.tensor.scatter:37 of
msgid "source element(s) to scatter."
msgstr "将要进行scatter操作的inp张量一个或多个源元素。"

#: megengine.functional.tensor.split:1 of
msgid ""
"Splits the input tensor into several smaller tensors. When "
"nsplits_or_sections is int, the last tensor may be smaller than others."
msgstr "把一个张量分隔成很多个小张量。当`nsplits_or_sections`是整数时，最后一个张量可能比其他张量小。"

#: megengine.functional.tensor.split:5 of
msgid "number of sub tensors or sections information list."
msgstr "子张量或每个部分的信息列表的个数。"

#: megengine.functional.tensor.split:6 of
msgid "which axis will be splited."
msgstr "需要被分隔的轴。"

#: megengine.functional.tensor.split:7 of
msgid "output tensor list."
msgstr "输出张量列表。"

#: megengine.functional.tensor.squeeze:1 of
msgid "Removes dimension of shape 1."
msgstr "删除形状(shape)中下标为1的维度。"

#: megengine.functional.tensor.squeeze:6 of
msgid "place of axis to be removed."
msgstr "将要被移除的轴的位置。"

#: megengine.functional.tensor.stack:1 of
msgid ""
"Concats a sequence of tensors along a new axis. The input tensors must "
"have the same shape."
msgstr "在一个新的轴上连接一个序列中的张量。输入张量必须有相同的形状。"

#: megengine.functional.tensor.stack:4 of
msgid "input tensors."
msgstr "输入张量。"

#: megengine.functional.tensor.stack:5 of
msgid "which axis will be concatenated."
msgstr "用来连接的轴。"

#: megengine.functional.tensor.stack:6 of
msgid "the device output will be. Default: None"
msgstr "输出所在的计算节点。 默认：None"

#: megengine.functional.tensor.stack:7 of
msgid "output concatenated tensor."
msgstr "输入拼接好的张量。"

#: megengine.functional.tensor.transpose:1 of
msgid "Swaps shapes and strides according to given pattern."
msgstr "根据给定模板交换形状和步长（stride）。"

#: megengine.functional.tensor.transpose:6 of
msgid "a list of integers including 0, 1, ... , ``ndim``-1,"
msgstr "一个包含 0, 1, ..., ``ndim``-1 的整数列表"

#: megengine.functional.tensor.transpose:7 of
msgid ""
"and any number of ``'x'`` char in dimensions where this tensor should be "
"broadcasted. For examples:"
msgstr "一个包含0, 1, ... , ``ndim`` -1的整型数(int)列表，任意数量的 ``'x'`` 字符位于张量要进行广播的维度上。例如："

#: megengine.functional.tensor.transpose:9 of
msgid "(``'x'``) -> make a 0d (scalar) into a 1d vector"
msgstr "(``'x'``) -> 将一个0维向量(标量)放入一个1维向量中"

#: megengine.functional.tensor.transpose:10 of
msgid "(0, 1) -> identity for 2d vectors"
msgstr "(0, 1) -> 等价的2维向量"

#: megengine.functional.tensor.transpose:11 of
msgid "(1, 0) -> inverts the first and second dimensions"
msgstr "(1, 0) -> 将第一维和第二维互换"

#: megengine.functional.tensor.transpose:12 of
msgid "(``'x'``, 0) -> make a row out of a 1d vector (N to 1xN)"
msgstr "(``'x'``, 0) -> 将1维向量 (N to 1xN) 中的数排成一行"

#: megengine.functional.tensor.transpose:13 of
msgid "(0, ``'x'``) -> make a column out of a 1d vector (N to Nx1)"
msgstr "(0, ``'x'``) -> 将一维向量 (N to Nx1)中的数排成一列"

#: megengine.functional.tensor.transpose:14 of
msgid "(2, 0, 1) -> AxBxC to CxAxB"
msgstr "(2, 0, 1) -> AxBxC 变为 CxAxB"

#: megengine.functional.tensor.transpose:15 of
msgid "(0, ``'x'``, 1) -> AxB to Ax1xB"
msgstr "(0, ``'x'``, 1) -> AxB 变为 Ax1xB"

#: megengine.functional.tensor.transpose:16 of
msgid "(1, ``'x'``, 0) -> AxB to Bx1xA"
msgstr "(1, ``'x'``, 0) -> AxB 变为 Bx1xA"

#: megengine.functional.tensor.transpose:17 of
msgid ""
"(1,) -> this removes dimensions 0. It must be a broadcastable dimension "
"(1xA to A)"
msgstr "(1,) -> 这样就删除了第0维。最终一定变为可以广播的维度 (1xA to A)"

#: megengine.functional.tensor.where:1 of
msgid "Selects elements either from Tensor x or Tensor y, according to mask."
msgstr "根据mask选出张量x或张量y中的元素。"

#: megengine.functional.tensor.where:3 of
msgid ""
"\\textrm{out}_i = x_i \\textrm{ if } \\textrm{mask}_i \\textrm{ is True "
"else } y_i"
msgstr ""
"\\textrm{out}_i = x_i \\textrm{ if } \\textrm{mask}_i \\textrm{ is True "
"else } y_i"

#: megengine.functional.tensor.where:8 of
msgid "a mask used for choosing ``x`` or ``y``."
msgstr "用于选择x或y的 mask。"

#: megengine.functional.tensor.where:10 of
msgid "first choice."
msgstr "第一个选择。"

#: megengine.functional.tensor.where:12 of
msgid "second choice."
msgstr "第二个选择。"

#: megengine.functional.tensor.zeros:1 of
msgid "Returns a zero tensor with given shape."
msgstr "返回一个给定形状的全0张量。"

#: megengine.functional.tensor.zeros_like:1 of
msgid "Returns a zero tensor with the same shape as input tensor."
msgstr "返回一个与输入张量形状相同的全0张量。"

#: ../../source_api/zh/api/megengine.functional.rst:92
msgid "megengine.functional.types"
msgstr "megengine.functional.types"

#: megengine.functional.types.get_ndtuple:1 of
msgid "Converts possibly 1D tuple to n-dim tuple."
msgstr "把可能的1维元组转换成n维元组。"

#: megengine.functional.types.get_ndtuple:3 of
msgid "value will be filled in generated tuple."
msgstr "元素会被填充到生成的元组中。"

#: megengine.functional.types.get_ndtuple:4 of
msgid "how many elements will the tuple have."
msgstr "元组里包含的元素个数。"

#: megengine.functional.types.get_ndtuple:6 of
msgid "whether to allow zero tuple value."
msgstr "是否允许出现0值。"

#: megengine.functional.types.get_ndtuple:7 of
msgid "a tuple."
msgstr "一个元组。"

#: ../../source_api/zh/api/megengine.functional.rst:100
msgid "megengine.functional.utils"
msgstr "megengine.functional.utils"

#: megengine.functional.utils.copy:1 of
msgid "Copies tensor to another device."
msgstr "把张量复制到另一个设备上。"

#: megengine.functional.utils.copy:4 of
msgid "destination device."
msgstr "目标设备。"

#: megengine.functional.utils.topk_accuracy:1 of
msgid ""
"Calculates the classification accuracy given predicted logits and ground-"
"truth labels."
msgstr "根据给定的预测的logits和真实值标签计算分类准确率。"

#: megengine.functional.utils.topk_accuracy:4 of
msgid ""
"model predictions of shape `[batch_size, num_classes]`, representing the "
"probability (likelyhood) of each class."
msgstr "模型预测值，形为 [batch_size, num_classes] ，表示其属于各类别(class)的概率。"

#: megengine.functional.utils.topk_accuracy:7 of
msgid "ground-truth labels, 1d tensor of int32."
msgstr "真实值标签，int32类型的一维张量。"

#: megengine.functional.utils.topk_accuracy:9 of
msgid "specifies the topk values, could be an int or tuple of ints. Default: 1"
msgstr "指定前k个值，可以是整型数，也可以是整型数构成的元组。 默认： 1"

#: megengine.functional.utils.topk_accuracy:10 of
msgid ""
":py:data:`~typing.Union`\\[:py:class:`~megengine.tensor.Tensor`, "
":py:class:`~typing.Iterable`\\[:py:class:`~megengine.tensor.Tensor`]]"
msgstr ""
":py:data:`~typing.Union`\\[:py:class:`~megengine.tensor.Tensor`, "
":py:class:`~typing.Iterable`\\[:py:class:`~megengine.tensor.Tensor`]]"

#: megengine.functional.utils.topk_accuracy:11 of
msgid "tensor(s) of classification accuracy between 0.0 and 1.0."
msgstr "表示分类准确率的张量(一个或多个)，数值介于0.0到1.0之间。"
